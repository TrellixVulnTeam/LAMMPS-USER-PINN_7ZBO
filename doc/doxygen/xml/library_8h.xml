<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="library_8h" kind="file" language="C++">
    <compoundname>library.h</compoundname>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="library_8h_1a8f60df5cd520b67959d22185afcdacc5" prot="public" static="no" strong="no">
        <type></type>
        <name>_LMP_DATATYPE_CONST</name>
        <enumvalue id="library_8h_1a8f60df5cd520b67959d22185afcdacc5a6f4597ad5c533e63a78fe90151d4d348" prot="public">
          <name>LAMMPS_INT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit integer (array) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a8f60df5cd520b67959d22185afcdacc5acdc5b9e5771b685c0f5c0377a06380da" prot="public">
          <name>LAMMPS_INT_2D</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>two-dimensional 32-bit integer array </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a8f60df5cd520b67959d22185afcdacc5a5a6c3a30d227047ab64e210c8a2fd468" prot="public">
          <name>LAMMPS_DOUBLE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit double (array) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a8f60df5cd520b67959d22185afcdacc5a515e6e960fa5de1f4e22596ede33fdeb" prot="public">
          <name>LAMMPS_DOUBLE_2D</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>two-dimensional 64-bit double array </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a8f60df5cd520b67959d22185afcdacc5a3e0db9f4dfd611ebb971372cc245e80c" prot="public">
          <name>LAMMPS_INT64</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit integer (array) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a8f60df5cd520b67959d22185afcdacc5abfc022018c51b292be00cbc87760ab60" prot="public">
          <name>LAMMPS_INT64_2D</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>two-dimensional 64-bit integer array </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a8f60df5cd520b67959d22185afcdacc5ae8c997bf96560c2d658a3d2a01518d72" prot="public">
          <name>LAMMPS_STRING</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>C-String </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data type constants for extracting data from atoms, computes and fixes</para>
<para>Must be kept in sync with the equivalent constants in lammps.py </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="47" column="1" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" bodystart="47" bodyend="55"/>
      </memberdef>
      <memberdef kind="enum" id="library_8h_1af78e950523b27d0aa9b74ccf93666d36" prot="public" static="no" strong="no">
        <type></type>
        <name>_LMP_STYLE_CONST</name>
        <enumvalue id="library_8h_1af78e950523b27d0aa9b74ccf93666d36a5d9f763d2a7c13c4aea83405aaf4b3f3" prot="public">
          <name>LMP_STYLE_GLOBAL</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return global data </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1af78e950523b27d0aa9b74ccf93666d36aa1e72b0a28e28261262774733cdbadfa" prot="public">
          <name>LMP_STYLE_ATOM</name>
          <initializer>=1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return per-atom data </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1af78e950523b27d0aa9b74ccf93666d36a9b74ce240cd632e21f8c1a5a1cf07ed0" prot="public">
          <name>LMP_STYLE_LOCAL</name>
          <initializer>=2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return local data </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Style constants for extracting data from computes and fixes.</para>
<para>Must be kept in sync with the equivalent constants in lammps.py </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="61" column="1" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="library_8h_1a30cd6a0606720be7addec2816760879e" prot="public" static="no" strong="no">
        <type></type>
        <name>_LMP_TYPE_CONST</name>
        <enumvalue id="library_8h_1a30cd6a0606720be7addec2816760879ea3a0d5e6c49cc929d953b366ed58c821b" prot="public">
          <name>LMP_TYPE_SCALAR</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return scalar </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a30cd6a0606720be7addec2816760879ead7beec11786a3dc637fcdd2ac62506e8" prot="public">
          <name>LMP_TYPE_VECTOR</name>
          <initializer>=1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return vector </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a30cd6a0606720be7addec2816760879eaaacd44f7a32b76b06051cb01ff40451a" prot="public">
          <name>LMP_TYPE_ARRAY</name>
          <initializer>=2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return array </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a30cd6a0606720be7addec2816760879eab7e39a6a361f8bc210064c9d853b4ded" prot="public">
          <name>LMP_SIZE_VECTOR</name>
          <initializer>=3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return length of vector </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a30cd6a0606720be7addec2816760879eaa65d78d0215fbb5d1f8cf6dfa05ed485" prot="public">
          <name>LMP_SIZE_ROWS</name>
          <initializer>=4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return number of rows </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="library_8h_1a30cd6a0606720be7addec2816760879ea0213053b1c6d4283bb6d662a00fecc16" prot="public">
          <name>LMP_SIZE_COLS</name>
          <initializer>=5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return number of columns </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type and size constants for extracting data from computes and fixes.</para>
<para>Must be kept in sync with the equivalent constants in lammps.py </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="71" column="1" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" bodystart="71" bodyend="78"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="library_8h_1a3821409f23bb75cfc889a78c99bed331" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* FixExternalFnPtr)(void *, int, int, int *, double **, double **)</definition>
        <argsstring>)(void *, int64_t, int, int64_t *, double **, double **)</argsstring>
        <name>FixExternalFnPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="219" column="9" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="library_8h_1a72b42bbe7e60dc8851ef0e955cfad399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lammps_open</definition>
        <argsstring>(int argc, char **argv, MPI_Comm comm, void **ptr)</argsstring>
        <name>lammps_open</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>MPI_Comm</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create instance of the LAMMPS class and return pointer to it.</para>
<para><verbatim>embed:rst

The :cpp:func:`lammps_open` function creates a new :cpp:class:`LAMMPS
&lt;LAMMPS_NS::LAMMPS&gt;` class instance while passing in a list of strings
as if they were :doc:`command-line arguments &lt;Run_options&gt;` for the
LAMMPS executable, and an MPI communicator for LAMMPS to run under.
Since the list of arguments is **exactly** as when called from the
command line, the first argument would be the name of the executable and
thus is otherwise ignored.  However ``argc`` may be set to 0 and then
``argv`` may be ``NULL``.  If MPI is not yet initialized, ``MPI_Init()``
will be called during creation of the LAMMPS class instance.

If for some reason the creation or initialization of the LAMMPS instance
fails a null pointer is returned.

.. versionchanged:: 18Sep2020

   This function now has the pointer to the created LAMMPS class
   instance as return value.  For backward compatibility it is still
   possible to provide the address of a pointer variable as final
   argument *ptr*\ .

.. deprecated:: 18Sep2020

   The *ptr* argument will be removed in a future release of LAMMPS.
   It should be set to ``NULL`` instead.

.. note::

   This function is **only** declared when the code using the LAMMPS
   ``library.h`` include file is compiled with ``-DLAMMPS_LIB_MPI``,
   or contains a ``#define LAMMPS_LIB_MPI 1`` statement before
   ``#include &quot;library.h&quot;``.  Otherwise you can only use the
   :cpp:func:`lammps_open_no_mpi` or :cpp:func:`lammps_open_fortran`
   functions.

*See also*
   :cpp:func:`lammps_open_no_mpi`, :cpp:func:`lammps_open_fortran`</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>number of command line arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>list of command line argument strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>MPI communicator for this LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a void pointer variable which serves as a handle; may be <computeroutput>NULL</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to new LAMMPS instance cast to <computeroutput>void *</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="91" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="163" bodyend="184" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="91" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a01c641f102a6d3fa96ed34750914a98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lammps_open_no_mpi</definition>
        <argsstring>(int argc, char **argv, void **ptr)</argsstring>
        <name>lammps_open_no_mpi</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variant of <computeroutput>lammps_open()</computeroutput> that implicitly uses <computeroutput>MPI_COMM_WORLD</computeroutput>.</para>
<para><verbatim>embed:rst

This function is a version of :cpp:func:`lammps_open`, that is missing
the MPI communicator argument.  It will use ``MPI_COMM_WORLD`` instead.
The type and purpose of arguments and return value are otherwise the
same.

Outside of the convenience, this function is useful, when the LAMMPS
library was compiled in serial mode, but the calling code runs in
parallel and the ``MPI_Comm`` data type of the STUBS library would not
be compatible with that of the calling code.

If for some reason the creation or initialization of the LAMMPS instance
fails a null pointer is returned.

.. versionchanged:: 18Sep2020

   This function now has the pointer to the created LAMMPS class
   instance as return value.  For backward compatibility it is still
   possible to provide the address of a pointer variable as final
   argument *ptr*\ .

.. deprecated:: 18Sep2020

   The *ptr* argument will be removed in a future release of LAMMPS.
   It should be set to ``NULL`` instead.


*See also*
   :cpp:func:`lammps_open`, :cpp:func:`lammps_open_fortran`</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>number of command line arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>list of command line argument strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a void pointer variable which serves as a handle; may be <computeroutput>NULL</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to new LAMMPS instance cast to <computeroutput>void *</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="93" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="229" bodyend="232" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a4f33b973643d1fee38ecdd87c81bbb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lammps_open_fortran</definition>
        <argsstring>(int argc, char **argv, int f_comm)</argsstring>
        <name>lammps_open_fortran</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>f_comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variant of <computeroutput>lammps_open()</computeroutput> using a Fortran MPI communicator.</para>
<para><verbatim>embed:rst

This function is a version of :cpp:func:`lammps_open`, that uses an
integer for the MPI communicator as the MPI Fortran interface does.  It
is used in the :f:func:`lammps` constructor of the LAMMPS Fortran
module.  Internally it converts the *f_comm* argument into a C-style MPI
communicator with ``MPI_Comm_f2c()`` and then calls
:cpp:func:`lammps_open`.

If for some reason the creation or initialization of the LAMMPS instance
fails a null pointer is returned.

.. versionadded:: 18Sep2020

*See also*
   :cpp:func:`lammps_open_fortran`, :cpp:func:`lammps_open_no_mpi`</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>number of command line arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>list of command line argument strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_comm</parametername>
</parameternamelist>
<parameterdescription>
<para>Fortran style MPI communicator for this LAMMPS instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to new LAMMPS instance cast to <computeroutput>void *</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="94" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="262" bodyend="267" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a75570a623be78c153a75eb533a0b65d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_close</definition>
        <argsstring>(void *handle)</argsstring>
        <name>lammps_close</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a LAMMPS instance created by lammps_open() or its variants.</para>
<para><verbatim>embed:rst

This function deletes the LAMMPS class instance pointed to by ``handle``
that was created by one of the :cpp:func:`lammps_open` variants.  It
does **not** call ``MPI_Finalize()`` to allow creating and deleting
multiple LAMMPS instances concurrently or sequentially.  See
:cpp:func:`lammps_mpi_finalize` for a function performing this operation.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="95" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="285" bodyend="289" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="95" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1afee0113d4bcf1cbe55a8f83176b39b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_mpi_init</definition>
        <argsstring>()</argsstring>
        <name>lammps_mpi_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ensure the MPI environment is initialized.</para>
<para><verbatim>embed:rst

The MPI standard requires that any MPI application must call
``MPI_Init()`` exactly once before performing any other MPI function
calls.  This function checks, whether MPI is already initialized and
calls ``MPI_Init()`` in case it is not.

.. versionadded:: 18Sep2020</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="97" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="306" bodyend="318" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="97" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a181557f91cb6d49ba67083a51cf110dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_mpi_finalize</definition>
        <argsstring>()</argsstring>
        <name>lammps_mpi_finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shut down the MPI infrastructure.</para>
<para><verbatim>embed:rst

The MPI standard requires that any MPI application calls
``MPI_Finalize()`` before exiting.  Even if a calling program does not
do any MPI calls, MPI is still initialized internally to avoid errors
accessing any MPI functions.  This function should then be called right
before exiting the program to wait until all (parallel) tasks are
completed and then MPI is cleanly shut down.  After this function no
more MPI calls may be made.

.. versionadded:: 18Sep2020</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="98" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="338" bodyend="349" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="98" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a76c1ce1af98c09978578c7a94d778c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_file</definition>
        <argsstring>(void *handle, const char *file)</argsstring>
        <name>lammps_file</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
          <defname>filename</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process LAMMPS input from a file.</para>
<para><verbatim>embed:rst

This function processes commands in the file pointed to by *filename*
line by line and thus functions very similar to the :doc:`include
&lt;include&gt;` command. The function returns when the end of the file is
reached and the commands have completed.

The actual work is done by the functions
:cpp:func:`Input::file(const char *)&lt;void LAMMPS_NS::Input::file(const char *)&gt;`
and :cpp:func:`Input::file()&lt;void LAMMPS_NS::Input::file()&gt;`.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of a file with LAMMPS input </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="104" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="373" bodyend="386" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="104" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a81fbef297272938327713bda40d40e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* lammps_command</definition>
        <argsstring>(void *handle, const char *cmd)</argsstring>
        <name>lammps_command</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process a single LAMMPS input command from a string.</para>
<para><verbatim>embed:rst

This function tells LAMMPS to execute the single command in the string
*cmd*.  The entire string is considered as command and need not have a
(final) newline character.  Newline characters in the body of the
string, however, will be treated as part of the command and will **not**
start a second command.  The function :cpp:func:`lammps_commands_string`
processes a string with multiple command lines.

The function returns the name of the command on success or ``NULL`` when
passing a string without a command.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>string with a single LAMMPS command </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string with parsed command name or <computeroutput>NULL</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="106" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="410" bodyend="426" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ab542f51c42bcf8e39b64722ffa426890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_commands_list</definition>
        <argsstring>(void *handle, int ncmd, const char **cmds)</argsstring>
        <name>lammps_commands_list</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncmd</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>cmds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process multiple LAMMPS input commands from list of strings.</para>
<para><verbatim>embed:rst

This function processes multiple commands from a list of strings by
first concatenating the individual strings in *cmds* into a single
string, inserting newline characters as needed.  The combined string
is passed to :cpp:func:`lammps_commands_string` for processing.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncmd</parametername>
</parameternamelist>
<parameterdescription>
<para>number of lines in <emphasis>cmds</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmds</parametername>
</parameternamelist>
<parameterdescription>
<para>list of strings with LAMMPS commands </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="107" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="445" bodyend="468" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="107" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a82b8d3fb9db7e0a834f6da0996e61d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_commands_string</definition>
        <argsstring>(void *handle, const char *str)</argsstring>
        <name>lammps_commands_string</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process a block of LAMMPS input commands from a single string.</para>
<para><verbatim>embed:rst

This function processes a multi-line string similar to a block of
commands from a file.  The string may have multiple lines (separated by
newline characters) and also single commands may be distributed over
multiple lines with continuation characters (&apos;&amp;&apos;).  Those lines are
combined by removing the &apos;&amp;&apos; and the following newline character.  After
this processing the string is handed to LAMMPS for parsing and
executing.

.. note::

   Multi-line commands enabled by triple quotes will NOT work with
   this function.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>string with block of LAMMPS input commands </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="108" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="494" bodyend="530" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="108" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1aa7d4ad0dc261c21fa41cffa38ea3ac21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double lammps_get_natoms</definition>
        <argsstring>(void *handle)</argsstring>
        <name>lammps_get_natoms</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the total number of atoms in the system.</para>
<para><verbatim>embed:rst

This number may be very large when running large simulations across
multiple processors.  Depending on compile time choices, LAMMPS may be
using either 32-bit or a 64-bit integer to store this number. For
portability this function returns thus a double precision
floating point number, which can represent up to a 53-bit signed
integer exactly (:math:`\approx 10^{16}`).

As an alternative, you can use :cpp:func:`lammps_extract_global`
and cast the resulting pointer to an integer pointer of the correct
size and dereference it.  The size of that integer (in bytes) can be
queried by calling :cpp:func:`lammps_extract_setting` to return
the size of a ``bigint`` integer.

.. versionchanged:: 18Sep2020

   The type of the return value was changed from ``int`` to ``double``
   to accommodate reporting atom counts for larger systems that would
   overflow a 32-bit int without having to depend on a 64-bit bit
   integer type definition.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>total number of atoms or 0 if value is too large </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="114" column="8" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="565" bodyend="572" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="114" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a5f54fbac6f7be9c20605c0faf71ec77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double lammps_get_thermo</definition>
        <argsstring>(void *handle, const char *keyword)</argsstring>
        <name>lammps_get_thermo</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current value of a thermo keyword.</para>
<para><verbatim>embed:rst

This function returns the current value of a :doc:`thermo keyword
&lt;thermo_style&gt;`.  Unlike :cpp:func:`lammps_extract_global` it does not
give access to the storage of the desired data but returns its value as
a ``double``, so it can also return information that is computed on-the-fly.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyword</parametername>
</parameternamelist>
<parameterdescription>
<para>string with the name of the thermo keyword </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of the requested thermo property or 0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="115" column="8" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="591" bodyend="603" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="115" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a5280ea3a305969261faa1a0258b9c7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_extract_box</definition>
        <argsstring>(void *handle, double *boxlo, double *boxhi, double *xy, double *yz, double *xz, int *pflags, int *boxflag)</argsstring>
        <name>lammps_extract_box</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boxlo</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boxhi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>xy</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>yz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>xz</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>boxflag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract simulation box parameters.</para>
<para><verbatim>embed:rst

This function (re-)initializes the simulation box and boundary
information and then assign the designated data to the locations in the
pointers passed as arguments. Any argument (except the first) may be
a NULL pointer and then will not be assigned.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boxlo</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to 3 doubles where the lower box boundary is stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boxhi</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to 3 doubles where the upper box boundary is stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xy</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a double where the xy tilt factor is stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yz</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a double where the yz tilt factor is stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xz</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a double where the xz tilt factor is stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pflags</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to 3 ints, set to 1 for periodic boundaries and 0 for non-periodic </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boxflag</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an int, which is set to 1 if the box will be changed during a simulation by a fix and 0 if not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="117" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="629" bodyend="670" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ada23ca4aacdcc9b5991af9968e0369e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_reset_box</definition>
        <argsstring>(void *handle, double *boxlo, double *boxhi, double xy, double yz, double xz)</argsstring>
        <name>lammps_reset_box</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boxlo</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boxhi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yz</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset simulation box parameters.</para>
<para><verbatim>embed:rst

This function sets the simulation box dimensions (upper and lower bounds
and tilt factors) from the provided data and then re-initializes the box
information and all derived settings.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boxlo</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to 3 doubles containing the lower box boundary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boxhi</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to 3 doubles containing the upper box boundary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xy</parametername>
</parameternamelist>
<parameterdescription>
<para>xy tilt factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yz</parametername>
</parameternamelist>
<parameterdescription>
<para>yz tilt factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xz</parametername>
</parameternamelist>
<parameterdescription>
<para>xz tilt factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="120" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="691" bodyend="721" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="120" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ab1a5d06bc29dd1233cde03c857ff0821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_memory_usage</definition>
        <argsstring>(void *handle, double *meminfo)</argsstring>
        <name>lammps_memory_usage</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>meminfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get memory usage information</para>
<para><verbatim>embed:rst

This function will retrieve memory usage information for the current
LAMMPS instance or process.  The *meminfo* buffer will be filled with
3 different numbers (if supported by the operating system).  The first
is the tally (in MBytes) of all large memory allocations made by LAMMPS.
This is a lower boundary of how much memory is requested and does not
account for memory allocated on the stack or allocations via ``new``.
The second number is the current memory allocation of the current process
as returned by a memory allocation reporting in the system library.  The
third number is the maximum amount of RAM (not swap) used by the process
so far. If any of the two latter parameters is not supported by the operating
system it will be set to zero.

.. versionadded:: 18Sep2020</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meminfo</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer with space for at least 3 double to store data in. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="123" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="749" bodyend="754" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="123" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a27501b4b00aa53f6621e996e3eeeb149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_get_mpi_comm</definition>
        <argsstring>(void *handle)</argsstring>
        <name>lammps_get_mpi_comm</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return current LAMMPS world communicator as integer</para>
<para><verbatim>embed:rst

This will take the LAMMPS &quot;world&quot; communicator and convert it to an
integer using ``MPI_Comm_c2f()``, so it is equivalent to the
corresponding MPI communicator in Fortran. This way it can be safely
passed around between different programming languages.  To convert it
to the C language representation use ``MPI_Comm_f2c()``.

If LAMMPS was compiled with MPI_STUBS, this function returns -1.

.. versionadded:: 18Sep2020

*See also*
   :cpp:func:`lammps_open_fortran`</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fortran representation of the LAMMPS world communicator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="124" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="780" bodyend="789" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1aec668a9f577e41295afb673f7edc99da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_extract_setting</definition>
        <argsstring>(void *handle, const char *keyword)</argsstring>
        <name>lammps_extract_setting</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query LAMMPS about global settings.</para>
<para><verbatim>embed:rst

This function will retrieve or compute global properties. In contrast to
:cpp:func:`lammps_get_thermo` this function returns an ``int``.  The
following tables list the currently supported keyword.  If a keyword is
not recognized, the function returns -1.

* :ref:`Integer sizes &lt;extract_integer_sizes&gt;`
* :ref:`System status &lt;extract_system_status&gt;`
* :ref:`System sizes &lt;extract_system_sizes&gt;`
* :ref:`Atom style flags &lt;extract_atom_flags&gt;`

.. _extract_integer_sizes:

**Integer sizes**

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Keyword
     - Description / Return value
   * - bigint
     - size of the ``bigint`` integer type, 4 or 8 bytes.
       Set at :ref:`compile time &lt;size&gt;`.
   * - tagint
     - size of the ``tagint`` integer type, 4 or 8 bytes.
       Set at :ref:`compile time &lt;size&gt;`.
   * - imageint
     - size of the ``imageint`` integer type, 4 or 8 bytes.
       Set at :ref:`compile time &lt;size&gt;`.

.. _extract_system_status:

**System status**

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Keyword
     - Description / Return value
   * - dimension
     - Number of dimensions: 2 or 3. See :doc:`dimension`.
   * - box_exist
     - 1 if the simulation box is defined, 0 if not.
       See :doc:`create_box`.
   * - triclinic
     - 1 if the the simulation box is triclinic, 0 if orthogonal.
       See :doc:`change_box`.

.. _extract_system_sizes:

**System sizes**

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Keyword
     - Description / Return value
   * - nlocal
     - number of &quot;owned&quot; atoms of the current MPI rank.
   * - nghost
     - number of &quot;ghost&quot; atoms of the current MPI rank.
   * - nall
     - number of all &quot;owned&quot; and &quot;ghost&quot; atoms of the current MPI rank.
   * - nmax
     - maximum of nlocal+nghost across all MPI ranks (for per-atom data array size).
   * - ntypes
     - number of atom types
   * - nbondtypes
     - number of bond types
   * - nangletypes
     - number of angle types
   * - ndihedraltypes
     - number of dihedral types
   * - nimpropertypes
     - number of improper types

.. _extract_atom_flags:

**Atom style flags**

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Keyword
     - Description / Return value
   * - molecule_flag
     - 1 if the atom style includes molecular topology data. See :doc:`atom_style`.
   * - q_flag
     - 1 if the atom style includes point charges. See :doc:`atom_style`.
   * - mu_flag
     - 1 if the atom style includes point dipoles. See :doc:`atom_style`.
   * - rmass_flag
     - 1 if the atom style includes per-atom masses, 0 if there are per-type masses. See :doc:`atom_style`.
   * - radius_flag
     - 1 if the atom style includes a per-atom radius. See :doc:`atom_style`.
   * - sphere_flag
     - 1 if the atom style describes extended particles that can rotate. See :doc:`atom_style`.
   * - ellipsoid_flag
     - 1 if the atom style describes extended particles that may be ellipsoidal. See :doc:`atom_style`.
   * - omega_flag
     - 1 if the atom style can store per-atom rotational velocities. See :doc:`atom_style`.
   * - torque_flag
     - 1 if the atom style can store per-atom torques. See :doc:`atom_style`.
   * - angmom_flag
     - 1 if the atom style can store per-atom angular momentum. See :doc:`atom_style`.

*See also*
   :cpp:func:`lammps_extract_global`</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyword</parametername>
</parameternamelist>
<parameterdescription>
<para>string with the name of the thermo keyword </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of the queried setting or -1 if unknown </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="126" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="915" bodyend="951" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="126" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a7a5da49a662d7cc3e8eaa79d7cc344e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_extract_global_datatype</definition>
        <argsstring>(void *handle, const char *name)</argsstring>
        <name>lammps_extract_global_datatype</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get data type of internal global LAMMPS variables or arrays.</para>
<para><verbatim>embed:rst

This function returns an integer that encodes the data type of the global
property with the specified name. See :cpp:enum:`_LMP_DATATYPE_CONST` for valid
values. Callers of :cpp:func:`lammps_extract_global` can use this information
to then decide how to cast the (void*) pointer and access the data.

.. versionadded:: 18Sep2020</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with the name of the extracted property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer constant encoding the data type of the property or -1 if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="127" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="973" bodyend="1028" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="127" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a67d3bbc188b284fc94a5df6f32d5b028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lammps_extract_global</definition>
        <argsstring>(void *handle, const char *name)</argsstring>
        <name>lammps_extract_global</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to internal global LAMMPS variables or arrays.</para>
<para><verbatim>embed:rst

This function returns a pointer to the location of some global property
stored in one of the constituent classes of a LAMMPS instance.  The
returned pointer is cast to ``void *`` and needs to be cast to a pointer
of the type that the entity represents. The pointers returned by this
function are generally persistent; therefore it is not necessary to call
the function again, unless a :doc:`clear` command is issued which wipes
out and recreates the contents of the :cpp:class:`LAMMPS
&lt;LAMMPS_NS::LAMMPS&gt;` class.

Please also see :cpp:func:`lammps_extract_setting`,
:cpp:func:`lammps_get_thermo`, and :cpp:func:`lammps_extract_box`.

.. warning::

   Modifying the data in the location pointed to by the returned pointer
   may lead to inconsistent internal data and thus may cause failures or
   crashes or bogus simulations.  In general it is thus usually better
   to use a LAMMPS input command that sets or changes these parameters.
   Those will takes care of all side effects and necessary updates of
   settings derived from such settings.  Where possible a reference to
   such a command or a relevant section of the manual is given below.

The following tables list the supported names, their data types, length
of the data area, and a short description.  The data type can also be
queried through calling :cpp:func:`lammps_extract_global_datatype`.
The ``bigint`` type may be defined to be either an ``int`` or an
``int64_t``.  This is set at :ref:`compile time &lt;size&gt;` of the LAMMPS
library and can be queried through calling
:cpp:func:`lammps_extract_setting`.
The function :cpp:func:`lammps_extract_global_datatype` will directly
report the &quot;native&quot; data type.  The following tables are provided:

* :ref:`Timestep settings &lt;extract_timestep_settings&gt;`
* :ref:`Simulation box settings &lt;extract_box_settings&gt;`
* :ref:`System property settings &lt;extract_system_settings&gt;`
* :ref:`Unit settings &lt;extract_unit_settings&gt;`

.. _extract_timestep_settings:

**Timestep settings**

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Name
     - Type
     - Length
     - Description
   * - dt
     - double
     - 1
     - length of the time step. See :doc:`timestep`.
   * - ntimestep
     - bigint
     - 1
     - current time step number. See :doc:`reset_timestep`.
   * - atime
     - double
     - 1
     - accumulated simulation time in time units.
   * - atimestep
     - bigint
     - 1
     - the number of the timestep when &quot;atime&quot; was last updated.

.. _extract_box_settings:

**Simulation box settings**

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Name
     - Type
     - Length
     - Description
   * - boxlo
     - double
     - 3
     - lower box boundaries. See :doc:`create_box`.
   * - boxhi
     - double
     - 3
     - upper box boundaries. See :doc:`create_box`.
   * - boxxlo
     - double
     - 1
     - lower box boundary in x-direction. See :doc:`create_box`.
   * - boxxhi
     - double
     - 1
     - upper box boundary in x-direction. See :doc:`create_box`.
   * - boxylo
     - double
     - 1
     - lower box boundary in y-direction. See :doc:`create_box`.
   * - boxyhi
     - double
     - 1
     - upper box boundary in y-direction. See :doc:`create_box`.
   * - boxzlo
     - double
     - 1
     - lower box boundary in z-direction. See :doc:`create_box`.
   * - boxzhi
     - double
     - 1
     - upper box boundary in z-direction. See :doc:`create_box`.
   * - periodicity
     - int
     - 3
     - 0 if non-periodic, 1 if periodic for x, y, and z;
       See :doc:`boundary`.
   * - triclinic
     - int
     - 1
     - 1 if the the simulation box is triclinic, 0 if orthogonal;
       See :doc:`change_box`.
   * - xy
     - double
     - 1
     - triclinic tilt factor. See :doc:`Howto_triclinic`.
   * - yz
     - double
     - 1
     - triclinic tilt factor. See :doc:`Howto_triclinic`.
   * - xz
     - double
     - 1
     - triclinic tilt factor. See :doc:`Howto_triclinic`.

.. _extract_system_settings:

**System property settings**

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Name
     - Type
     - Length
     - Description
   * - ntypes
     - int
     - 1
     - number of atom types
   * - nbonds
     - bigint
     - 1
     - total number of bonds in the simulation.
   * - nangles
     - bigint
     - 1
     - total number of angles in the simulation.
   * - ndihedrals
     - bigint
     - 1
     - total number of dihedrals in the simulation.
   * - nimpropers
     - bigint
     - 1
     - total number of impropers in the simulation.
   * - natoms
     - bigint
     - 1
     - total number of atoms in the simulation.
   * - nlocal
     - int
     - 1
     - number of &quot;owned&quot; atoms of the current MPI rank.
   * - nghost
     - int
     - 1
     - number of &quot;ghost&quot; atoms of the current MPI rank.
   * - nmax
     - int
     - 1
     - maximum of nlocal+nghost across all MPI ranks (for per-atom data array size).
   * - q_flag
     - int
     - 1
     - **deprecated**. Use :cpp:func:`lammps_extract_setting` instead.

.. _extract_unit_settings:

**Unit settings**

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Name
     - Type
     - Length
     - Description
   * - units
     - char \*
     - 1
     - string with the current unit style. See :doc:`units`.
   * - boltz
     - double
     - 1
     - value of the &quot;boltz&quot; constant. See :doc:`units`.
   * - hplanck
     - double
     - 1
     - value of the &quot;hplanck&quot; constant. See :doc:`units`.
   * - mvv2e
     - double
     - 1
     - factor to convert :math:`\frac{1}{2}mv^2` for a particle to
       the current energy unit; See :doc:`units`.
   * - ftm2v
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - mv2d
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - nktv2p
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - qqr2e
     - double
     - 1
     - factor to convert :math:`\frac{q_i q_j}{r}` to energy units;
       See :doc:`units`.
   * - qe2f
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - vxmu2f
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - xxt2kmu
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - dielectric
     - double
     - 1
     - value of the dielectric constant. See :doc:`dielectric`.
   * - qqrd2e
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - e_mass
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - hhmrr2e
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - mvh2r
     - double
     - 1
     - (description missing) See :doc:`units`.
   * - angstrom
     - double
     - 1
     - constant to convert current length unit to angstroms;
       1.0 for reduced (aka &quot;lj&quot;) units. See :doc:`units`.
   * - femtosecond
     - double
     - 1
     - constant to convert current time unit to femtoseconds;
       1.0 for reduced (aka &quot;lj&quot;) units
   * - qelectron
     - double
     - 1
     - (description missing) See :doc:`units`.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with the name of the extracted property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer (cast to <computeroutput>void *</computeroutput>) to the location of the requested property. NULL if name is not known. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="128" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="1322" bodyend="1384" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="128" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1aed36a77c70d91c9497b5eee075d18aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_extract_atom_datatype</definition>
        <argsstring>(void *handle, const char *name)</argsstring>
        <name>lammps_extract_atom_datatype</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get data type of a LAMMPS per-atom property</para>
<para><verbatim>embed:rst

This function returns an integer that encodes the data type of the per-atom
property with the specified name. See :cpp:enum:`_LMP_DATATYPE_CONST` for valid
values. Callers of :cpp:func:`lammps_extract_atom` can use this information
to then decide how to cast the (void*) pointer and access the data.

.. versionadded:: 18Sep2020</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with the name of the extracted property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer constant encoding the data type of the property or -1 if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="134" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="1407" bodyend="1411" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="134" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ac7a2b3791b785a29e1cc383dec467819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lammps_extract_atom</definition>
        <argsstring>(void *handle, const char *name)</argsstring>
        <name>lammps_extract_atom</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to a LAMMPS per-atom property.</para>
<para><verbatim>embed:rst

This function returns a pointer to the location of per-atom properties
(and per-atom-type properties in the case of the &apos;mass&apos; keyword).
Per-atom data is distributed across sub-domains and thus MPI ranks.  The
returned pointer is cast to ``void *`` and needs to be cast to a pointer
of data type that the entity represents.

A table with supported keywords is included in the documentation
of the :cpp:func:`Atom::extract() &lt;LAMMPS_NS::Atom::extract&gt;` function.

.. warning::

   The pointers returned by this function are generally not persistent
   since per-atom data may be re-distributed, re-allocated, and
   re-ordered at every re-neighboring operation.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with the name of the extracted property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer (cast to <computeroutput>void *</computeroutput>) to the location of the requested data or <computeroutput>NULL</computeroutput> if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="135" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="1441" bodyend="1445" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="135" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a43bca59afa7277a729c0595d0f029d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lammps_extract_compute</definition>
        <argsstring>(void *handle, char *id, int, int)</argsstring>
        <name>lammps_extract_compute</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to data from a LAMMPS compute.</para>
<para><verbatim>embed:rst

This function returns a pointer to the location of data provided by a
:doc:`compute` instance identified by the compute-ID.  Computes may
provide global, per-atom, or local data, and those may be a scalar, a
vector, or an array or they may provide the information about the
dimensions of the respective data.  Since computes may provide multiple
kinds of data, it is required to set style and type flags representing
what specific data is desired.  This also determines to what kind of
pointer the returned pointer needs to be cast to access the data
correctly.  The function returns ``NULL`` if the compute ID is not found
or the requested data is not available or current. The following table
lists the available options.

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Style (see :cpp:enum:`_LMP_STYLE_CONST`)
     - Type (see :cpp:enum:`_LMP_TYPE_CONST`)
     - Returned type
     - Returned data
   * - LMP_STYLE_GLOBAL
     - LMP_TYPE_SCALAR
     - ``double *``
     - Global scalar
   * - LMP_STYLE_GLOBAL
     - LMP_TYPE_VECTOR
     - ``double *``
     - Global vector
   * - LMP_STYLE_GLOBAL
     - LMP_TYPE_ARRAY
     - ``double **``
     - Global array
   * - LMP_STYLE_GLOBAL
     - LMP_SIZE_VECTOR
     - ``int *``
     - Length of global vector
   * - LMP_STYLE_GLOBAL
     - LMP_SIZE_ROWS
     - ``int *``
     - Rows of global array
   * - LMP_STYLE_GLOBAL
     - LMP_SIZE_COLS
     - ``int *``
     - Columns of global array
   * - LMP_STYLE_ATOM
     - LMP_TYPE_VECTOR
     - ``double *``
     - Per-atom value
   * - LMP_STYLE_ATOM
     - LMP_TYPE_ARRAY
     - ``double **``
     - Per-atom vector
   * - LMP_STYLE_ATOM
     - LMP_SIZE_COLS
     - ``int *``
     - Columns in per-atom array, 0 if vector
   * - LMP_STYLE_LOCAL
     - LMP_TYPE_VECTOR
     - ``double *``
     - Local data vector
   * - LMP_STYLE_LOCAL
     - LMP_TYPE_ARRAY
     - ``double **``
     - Local data array
   * - LMP_STYLE_LOCAL
     - LMP_SIZE_ROWS
     - ``int *``
     - Number of local data rows
   * - LMP_STYLE_LOCAL
     - LMP_SIZE_COLS
     - ``int *``
     - Number of local data columns

.. warning::

   The pointers returned by this function are generally not persistent
   since the computed data may be re-distributed, re-allocated, and
   re-ordered at every invocation. It is advisable to re-invoke this
   function before the data is accessed, or make a copy if the data shall
   be used after other LAMMPS commands have been issued.

.. note::

   If the compute&apos;s data is not computed for the current step, the
   compute will be invoked.  LAMMPS cannot easily check at that time, if
   it is valid to invoke a compute, so it may fail with an error.  The
   caller has to check to avoid such an error.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>string with ID of the compute </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>constant indicating the style of data requested (global, per-atom, or local) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>constant indicating type of data (scalar, vector, or array) or size of rows or columns </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer (cast to <computeroutput>void *</computeroutput>) to the location of the requested data or <computeroutput>NULL</computeroutput> if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="141" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="1555" bodyend="1617" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="141" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a9b829b5fd5822a8524f681730f632597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lammps_extract_fix</definition>
        <argsstring>(void *handle, char *, int, int, int, int)</argsstring>
        <name>lammps_extract_fix</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to data from a LAMMPS fix.</para>
<para><verbatim>embed:rst

This function returns a pointer to data provided by a :doc:`fix`
instance identified by its fix-ID.  Fixes may provide global, per-atom,
or local data, and those may be a scalar, a vector, or an array, or they
may provide the information about the dimensions of the respective data.
Since individual fixes may provide multiple kinds of data, it is
required to set style and type flags representing what specific data is
desired.  This also determines to what kind of pointer the returned
pointer needs to be cast to access the data correctly.  The function
returns ``NULL`` if the fix ID is not found or the requested data is not
available.

.. note::

   When requesting global data, the fix data can only be accessed one
   item at a time without access to the pointer itself.  Thus this
   function will allocate storage for a single double value, copy the
   returned value to it, and returns a pointer to the location of the
   copy.  Therefore the allocated storage needs to be freed after its
   use to avoid a memory leak. Example:

   .. code-block:: c

      double *dptr = (double *) lammps_extract_fix(handle,name,0,1,0,0);
      double value = *dptr;
      lammps_free((void *)dptr);

The following table lists the available options.

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Style (see :cpp:enum:`_LMP_STYLE_CONST`)
     - Type (see :cpp:enum:`_LMP_TYPE_CONST`)
     - Returned type
     - Returned data
   * - LMP_STYLE_GLOBAL
     - LMP_TYPE_SCALAR
     - ``double *``
     - Copy of global scalar
   * - LMP_STYLE_GLOBAL
     - LMP_TYPE_VECTOR
     - ``double *``
     - Copy of global vector element at index nrow
   * - LMP_STYLE_GLOBAL
     - LMP_TYPE_ARRAY
     - ``double *``
     - Copy of global array element at nrow, ncol
   * - LMP_STYLE_GLOBAL
     - LMP_SIZE_VECTOR
     - ``int *``
     - Length of global vector
   * - LMP_STYLE_GLOBAL
     - LMP_SIZE_ROWS
     - ``int *``
     - Rows in global array
   * - LMP_STYLE_GLOBAL
     - LMP_SIZE_COLS
     - ``int *``
     - Columns in global array
   * - LMP_STYLE_ATOM
     - LMP_TYPE_VECTOR
     - ``double *``
     - Per-atom value
   * - LMP_STYLE_ATOM
     - LMP_TYPE_ARRAY
     - ``double **``
     - Per-atom vector
   * - LMP_STYLE_ATOM
     - LMP_SIZE_COLS
     - ``int *``
     - Columns of per-atom array, 0 if vector
   * - LMP_STYLE_LOCAL
     - LMP_TYPE_VECTOR
     - ``double *``
     - Local data vector
   * - LMP_STYLE_LOCAL
     - LMP_TYPE_ARRAY
     - ``double **``
     - Local data array
   * - LMP_STYLE_LOCAL
     - LMP_SIZE_ROWS
     - ``int *``
     - Number of local data rows
   * - LMP_STYLE_LOCAL
     - LMP_SIZE_COLS
     - ``int *``
     - Number of local data columns

.. warning::

   The pointers returned by this function for per-atom or local data are
   generally not persistent, since the computed data may be re-distributed,
   re-allocated, and re-ordered at every invocation of the fix.  It is thus
   advisable to re-invoke this function before the data is accessed, or
   make a copy, if the data shall be used after other LAMMPS commands have
   been issued.

.. note::

   LAMMPS cannot easily check if it is valid to access the data, so it
   may fail with an error.  The caller has to avoid such an error.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>string with ID of the fix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>constant indicating the style of data requested (global, per-atom, or local) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>constant indicating type of data (scalar, vector, or array) or size of rows or columns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nrow</parametername>
</parameternamelist>
<parameterdescription>
<para>row index (only used for global vectors and arrays) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncol</parametername>
</parameternamelist>
<parameterdescription>
<para>column index (only used for global arrays) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer (cast to <computeroutput>void *</computeroutput>) to the location of the requested data or <computeroutput>NULL</computeroutput> if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="142" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="1741" bodyend="1803" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="142" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a39d5b299def618508cb244c849487da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lammps_extract_variable</definition>
        <argsstring>(void *handle, char *, char *)</argsstring>
        <name>lammps_extract_variable</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to data from a LAMMPS variable.</para>
<para><verbatim>embed:rst

This function returns a pointer to data from a LAMMPS :doc:`variable`
identified by its name.  The variable must be either an *equal*\ -style
compatible or an *atom*\ -style variable.  Variables of style *internal*
are compatible with *equal*\ -style variables and so are *python*\
-style variables, if they return a numeric value.  The function returns
``NULL`` when a variable of the provided *name* is not found or of an
incompatible style.  The *group* argument is only used for *atom*\
-style variables and ignored otherwise.  If set to ``NULL`` when
extracting data from and *atom*\ -style variable, the group is assumed
to be &quot;all&quot;.

.. note::

   When requesting data from an *equal*\ -style or compatible variable
   this function allocates storage for a single double value, copies the
   returned value to it, and returns a pointer to the location of the
   copy.  Therefore the allocated storage needs to be freed after its
   use to avoid a memory leak. Example:

   .. code-block:: c

      double *dptr = (double *) lammps_extract_variable(handle,name,NULL);
      double value = *dptr;
      lammps_free((void *)dptr);

   For *atom*\ -style variables the data returned is a pointer to an
   allocated block of storage of double of the length ``atom-&gt;nlocal``.
   To avoid a memory leak, also this pointer needs to be freed after use.

Since the data is returned as copies, the location will persist, but its
values will not be updated, in case the variable is re-evaluated.

.. note::

   LAMMPS cannot easily check if it is valid to access the data
   referenced by the variables, e.g. computes or fixes or thermodynamic
   info, so it may fail with an error.  The caller has to make certain,
   that the data is extracted only when it safe to evaluate the variable
   and thus an error and crash is avoided.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>group-ID for atom style variable or <computeroutput>NULL</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer (cast to <computeroutput>void *</computeroutput>) to the location of the requested data or <computeroutput>NULL</computeroutput> if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="143" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="1859" bodyend="1887" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="143" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a6761c807601d866706bd4334de8888c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_set_variable</definition>
        <argsstring>(void *, char *, char *)</argsstring>
        <name>lammps_set_variable</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a string-style variable.</para>
<para>This function assigns a new value from the string str to the string-style variable name. Returns -1 if a variable of that name does not exist or is not a string-style variable, otherwise 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>new value of the variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or -1 on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="144" column="7" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="1902" bodyend="1914" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="144" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a08b464e199dd239e544be02fc7654274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_gather_atoms</definition>
        <argsstring>(void *handle, char *name, int type, int count, void *data)</argsstring>
        <name>lammps_gather_atoms</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="150" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="1941" bodyend="2053" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="150" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a20c86eb77163fd9f9e7d147dfdd9e77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_gather_atoms_concat</definition>
        <argsstring>(void *handle, char *name, int type, int count, void *data)</argsstring>
        <name>lammps_gather_atoms_concat</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="151" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="2076" bodyend="2200" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1aec4f0c5fbd9b87532e0380da24fd3e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_gather_atoms_subset</definition>
        <argsstring>(void *handle, char *name, int type, int count, int ndata, int *ids, void *data)</argsstring>
        <name>lammps_gather_atoms_subset</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="152" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="2225" bodyend="2346" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="152" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a56a5b41df74d0e0f2f3c9229bc357c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_scatter_atoms</definition>
        <argsstring>(void *handle, char *name, int type, int count, void *data)</argsstring>
        <name>lammps_scatter_atoms</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="153" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="2364" bodyend="2462" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="153" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a647c17855cb7059ef5d34a1accf94879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_scatter_atoms_subset</definition>
        <argsstring>(void *handle, char *name, int type, int count, int ndata, int *ids, void *data)</argsstring>
        <name>lammps_scatter_atoms_subset</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="154" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="2482" bodyend="2588" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a5a11a7aa7a1843632178d123a0f9ca9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_gather</definition>
        <argsstring>(void *handle, char *name, int type, int count, void *data)</argsstring>
        <name>lammps_gather</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="156" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="2615" bodyend="2807" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="156" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1aad13b838d3ca4157da4b421a1fde6c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_gather_concat</definition>
        <argsstring>(void *handle, char *name, int type, int count, void *data)</argsstring>
        <name>lammps_gather_concat</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="157" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="2834" bodyend="3049" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="157" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a672d61b6d67d25676aa91cdf875caedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_gather_subset</definition>
        <argsstring>(void *handle, char *name, int type, int count, int ndata, int *ids, void *data)</argsstring>
        <name>lammps_gather_subset</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="158" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="3076" bodyend="3286" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="158" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a473a3ced2b6374f1fdcc36d62c787392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_scatter</definition>
        <argsstring>(void *handle, char *name, int type, int count, void *data)</argsstring>
        <name>lammps_scatter</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="159" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="3311" bodyend="3489" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="159" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a0de1c2e6f5145759e8a9fa9eade756d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_scatter_subset</definition>
        <argsstring>(void *handle, char *name, int type, int count, int ndata, int *ids, void *data)</argsstring>
        <name>lammps_scatter_subset</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="160" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="3510" bodyend="3697" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1af55f66050a23ab0bbe41412abc90c1b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_create_atoms</definition>
        <argsstring>(void *handle, int n, int *id, int *type, double *x, double *v, int *image, int bexpand)</argsstring>
        <name>lammps_create_atoms</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bexpand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create N atoms from list of coordinates</para>
<para><verbatim>embed:rst

The prototype for this function when compiling with ``-DLAMMPS_BIGBIG``
is:

.. code-block:: c

   int lammps_create_atoms(void *handle, int n, int64_t *id, int *type, double *x, double *v, int64_t *image, int bexpand);

This function creates additional atoms from a given list of coordinates
and a list of atom types.  Additionally the atom-IDs, velocities, and
image flags may be provided.  If atom-IDs are not provided, they will be
automatically created as a sequence following the largest existing
atom-ID.

This function is useful to add atoms to a simulation or - in tandem with
:cpp:func:`lammps_reset_box` - to restore a previously extracted and
saved state of a simulation.  Additional properties for the new atoms
can then be assigned via the :cpp:func:`lammps_scatter_atoms`
:cpp:func:`lammps_extract_atom` functions.

For non-periodic boundaries, atoms will **not** be created that have
coordinates outside the box unless it is a shrink-wrap boundary and the
shrinkexceed flag has been set to a non-zero value.  For periodic
boundaries atoms will be wrapped back into the simulation cell and its
image flags adjusted accordingly, unless explicit image flags are
provided.

The function returns the number of atoms created or -1 on failure, e.g.
when called before as box has been created.

Coordinates and velocities have to be given in a 1d-array in the order
X(1),Y(1),Z(1),X(2),Y(2),Z(2),...,X(N),Y(N),Z(N).</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of atoms, N, to be added to the system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to N atom IDs; <computeroutput>NULL</computeroutput> will generate IDs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to N atom types (required) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to 3N doubles with x-,y-,z- positions of the new atoms (required) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to 3N doubles with x-,y-,z- velocities of the new atoms (set to 0.0 if <computeroutput>NULL</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to N imageint sets of image flags, or <computeroutput>NULL</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bexpand</parametername>
</parameternamelist>
<parameterdescription>
<para>if 1, atoms outside of shrink-wrap boundaries will still be created and not dropped and the box extended </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of atoms created on success; -1 on failure (no box, no atom IDs, etc.) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="163" column="8" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="3753" bodyend="3842" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="163" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a32fb9ca95add70da21272372006bf973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_create_atoms</definition>
        <argsstring>(void *handle, int n, int64_t *id, int *type, double *x, double *v, int64_t *image, int bexpand)</argsstring>
        <name>lammps_create_atoms</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bexpand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="166" column="8" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="166" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a6e4e76b8dfd445c9479bc4247b9c82c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_find_pair_neighlist</definition>
        <argsstring>(void *handle, char *style, int exact, int nsub, int request)</argsstring>
        <name>lammps_find_pair_neighlist</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>style</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exact</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsub</declname>
        </param>
        <param>
          <type>int</type>
          <declname>request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find neighbor list index of pair style neighbor list</para>
<para>Try finding pair instance that matches style. If exact is set, the pair must match style exactly. If exact is 0, style must only be contained. If pair is of style pair/hybrid, style is instead matched the nsub-th hybrid sub-style.</para>
<para>Once the pair instance has been identified, multiple neighbor list requests may be found. Every neighbor list is uniquely identified by its request index. Thus, providing this request index ensures that the correct neighbor list index is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>String used to search for pair style instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exact</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to control whether style should match exactly or only must be contained in pair style name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsub</parametername>
</parameternamelist>
<parameterdescription>
<para>match nsub-th hybrid sub-style </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>request index that specifies which neighbor list should be returned, in case there are multiple neighbor lists requests for the found pair style </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return neighbor list index if found, otherwise -1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="174" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="3869" bodyend="3885" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="174" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a78fcc204bc13c071824dab034c31479a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_find_fix_neighlist</definition>
        <argsstring>(void *handle, char *id, int request)</argsstring>
        <name>lammps_find_fix_neighlist</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find neighbor list index of fix neighbor list</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of fix instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>request index that specifies which request should be returned, in case there are multiple neighbor lists for this fix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return neighbor list index if found, otherwise -1 <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="175" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="3897" bodyend="3922" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="175" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a5edeb5237b7b9f16f45ee57fe6df053f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_find_compute_neighlist</definition>
        <argsstring>(void *handle, char *id, int request)</argsstring>
        <name>lammps_find_compute_neighlist</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find neighbor list index of compute neighbor list</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of fix instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>request index that specifies which request should be returned, in case there are multiple neighbor lists for this fix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return neighbor list index if found, otherwise -1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="176" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="3934" bodyend="3959" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="176" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ab4cd0310c0638fad6352d0081194bdd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_neighlist_num_elements</definition>
        <argsstring>(void *handle, int idx)</argsstring>
        <name>lammps_neighlist_num_elements</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of entries in the neighbor list with given index</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>neighbor list index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return number of entries in neighbor list, -1 if idx is not a valid index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="177" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="3970" bodyend="3980" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="177" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a0bd03926cf3a3ebb93311dab400c792c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_neighlist_element_neighbors</definition>
        <argsstring>(void *handle, int idx, int element, int *iatom, int *numneigh, int **neighbors)</argsstring>
        <name>lammps_neighlist_element_neighbors</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>element</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iatom</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>numneigh</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>neighbors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return atom local index, number of neighbors, and array of neighbor local atom indices of neighbor list entry</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of this neighbor list in the list of all neighbor lists </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>index of this neighbor list entry </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">iatom</parametername>
</parameternamelist>
<parameterdescription>
<para>local atom index (i.e. in the range [0, nlocal + nghost), -1 if invalid idx or element value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">numneigh</parametername>
</parameternamelist>
<parameterdescription>
<para>number of neighbors of atom iatom or 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">neighbors</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to array of neighbor atom local indices or NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="178" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="3995" bodyend="4016" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a41f44a4eef975f8a189d3186259a8ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_version</definition>
        <argsstring>(void *handle)</argsstring>
        <name>lammps_version</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get numerical representation of the LAMMPS version date.</para>
<para><verbatim>embed:rst

The :cpp:func:`lammps_version` function returns an integer representing
the version of the LAMMPS code in the format YYYYMMDD.  This can be used
to implement backward compatibility in software using the LAMMPS library
interface.  The specific format guarantees, that this version number is
growing with every new LAMMPS release.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an integer representing the version data in the format YYYYMMDD </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="184" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4038" bodyend="4042" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="184" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ae4b6178f693ff83002ee8a1559edd6ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_get_os_info</definition>
        <argsstring>(char *buffer, int buf_size)</argsstring>
        <name>lammps_get_os_info</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get operating system and architecture information</para>
<para><verbatim>embed:rst

The :cpp:func:`lammps_get_os_info` function can be used to retrieve
detailed information about the hosting operating system and
compiler/runtime.
A suitable buffer for a C-style string has to be provided and its length.
If the assembled text will be truncated to not overflow this buffer.

.. versionadded:: 9Oct2020</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>string buffer to copy the information to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the provided string buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="185" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4063" bodyend="4071" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="185" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ada45e7d079fddf8400e31cc98710b5f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_config_has_mpi_support</definition>
        <argsstring>()</argsstring>
        <name>lammps_config_has_mpi_support</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used to query whether LAMMPS was compiled with a real MPI library or in serial.</para>
<para><simplesect kind="return"><para>0 when compiled with MPI STUBS, otherwise 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="187" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4080" bodyend="4087" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="187" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a0bd41d39a5dd5992d614e150b6d88a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_config_has_gzip_support</definition>
        <argsstring>()</argsstring>
        <name>lammps_config_has_gzip_support</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the LAMMPS library supports compressed files via a pipe to gzip</para>
<para><verbatim>embed:rst
Several LAMMPS commands (e.g. :doc:`read_data`, :doc:`write_data`,
:doc:`dump styles atom, custom, and xyz &lt;dump&gt;`) support reading and
writing compressed files via creating a pipe to the ``gzip`` program.
This function checks whether this feature was :ref:`enabled at compile
time &lt;gzip&gt;`. It does **not** check whether the ``gzip`` itself is
installed and usable.
</verbatim></para>
<para><simplesect kind="return"><para>1 if yes, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="188" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4104" bodyend="4106" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="188" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a9de61d7686a3db2344fb94a4a22c67e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_config_has_png_support</definition>
        <argsstring>()</argsstring>
        <name>lammps_config_has_png_support</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the LAMMPS library supports writing PNG format images</para>
<para><verbatim>embed:rst
The LAMMPS :doc:`dump style image &lt;dump_image&gt;` supports writing multiple
image file formats.  Most of them need, however, support from an external
library and using that has to be :ref:`enabled at compile time &lt;graphics&gt;`.
This function checks whether support for the `PNG image file format
&lt;https://en.wikipedia.org/wiki/Portable_Network_Graphics&gt;`_ is available
in the current LAMMPS library.
</verbatim></para>
<para><simplesect kind="return"><para>1 if yes, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="189" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4123" bodyend="4125" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="189" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ac3835bbc1c6797e56f8aa47443d11af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_config_has_jpeg_support</definition>
        <argsstring>()</argsstring>
        <name>lammps_config_has_jpeg_support</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the LAMMPS library supports writing JPEG format images</para>
<para><verbatim>embed:rst
The LAMMPS :doc:`dump style image &lt;dump_image&gt;` supports writing multiple
image file formats.  Most of them need, however, support from an external
library and using that has to be :ref:`enabled at compile time &lt;graphics&gt;`.
This function checks whether support for the `JPEG image file format
&lt;https://jpeg.org/jpeg/&gt;`_ is available in the current LAMMPS library.
</verbatim></para>
<para><simplesect kind="return"><para>1 if yes, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="190" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4141" bodyend="4143" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="190" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1acbbc33bf81d78002a4ed94e2b7ff8f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_config_has_ffmpeg_support</definition>
        <argsstring>()</argsstring>
        <name>lammps_config_has_ffmpeg_support</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the LAMMPS library supports creating movie files via a pipe to ffmpeg</para>
<para><verbatim>embed:rst
The LAMMPS :doc:`dump style movie &lt;dump_image&gt;` supports generating movies
from images on-the-fly  via creating a pipe to the
`ffmpeg &lt;https://ffmpeg.org/ffmpeg/&gt;`_ program.
This function checks whether this feature was :ref:`enabled at compile time &lt;graphics&gt;`.
It does **not** check whether the ``ffmpeg`` itself is installed and usable.
</verbatim></para>
<para><simplesect kind="return"><para>1 if yes, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="191" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4159" bodyend="4161" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="191" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ade5f1cc597079d8cb32a9765cbfff44c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_config_has_exceptions</definition>
        <argsstring>()</argsstring>
        <name>lammps_config_has_exceptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether LAMMPS errors will throw a C++ exception</para>
<para><verbatim>embed:rst
In case of errors LAMMPS will either abort or throw a C++ exception.
The latter has to be :ref:`enabled at compile time &lt;exceptions&gt;`.
This function checks if exceptions were enabled.

When using the library interface and C++ exceptions are enabled,
the library interface functions will &quot;catch&quot; them and the
error status can then be checked by calling
:cpp:func:`lammps_has_error` and the most recent error message
can be retrieved via :cpp:func:`lammps_get_last_error_message`.
This can allow to restart a calculation or delete and recreate
the LAMMPS instance when C++ exceptions are enabled.  One application
of using exceptions this way is the :ref:`lammps_shell`.  If C++
exceptions are disabled and an error happens during a call to
LAMMPS, the application will terminate.
</verbatim> <simplesect kind="return"><para>1 if yes, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="192" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4185" bodyend="4187" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="192" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1adca5959e5b824ab7413c74ee05eb9f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_config_has_package</definition>
        <argsstring>(const char *)</argsstring>
        <name>lammps_config_has_package</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a specific package has been included in LAMMPS</para>
<para><verbatim>embed:rst
This function checks if the LAMMPS library in use includes the
specific :doc:`LAMMPS package &lt;Packages&gt;` provided as argument.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with the name of the package </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if included, 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="194" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4201" bodyend="4203" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="194" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a233aefab279fd9290f14fae1e4c16be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_config_package_count</definition>
        <argsstring>()</argsstring>
        <name>lammps_config_package_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Count the number of installed packages in the LAMMPS library.</para>
<para><verbatim>embed:rst
This function counts how many :doc:`LAMMPS packages &lt;Packages&gt;` are
included in the LAMMPS library in use.
</verbatim></para>
<para><simplesect kind="return"><para>number of packages included </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="195" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4216" bodyend="4222" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="195" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1aca1da31b8eb4342ee1eff02d721fa48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_config_package_name</definition>
        <argsstring>(int, char *, int)</argsstring>
        <name>lammps_config_package_name</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a package in the list of installed packages in the LAMMPS library.</para>
<para><verbatim>embed:rst
This function copies the name of the package with the index *idx* into the
provided C-style string buffer.  The length of the buffer must be provided
as *buf_size* argument.  If the name of the package exceeds the length of the
buffer, it will be truncated accordingly.  If the index is out of range,
the function returns 0 and *buffer* is set to an empty string, otherwise 1;
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the package in the list of included packages (0 &lt;= idx &lt; package count) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>string buffer to copy the name of the package to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the provided string buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="196" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4241" bodyend="4250" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="196" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a74aa598ce1e183ed70ce5eabf7202bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_has_style</definition>
        <argsstring>(void *, const char *, const char *)</argsstring>
        <name>lammps_has_style</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>category</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a specific style has been included in LAMMPS</para>
<para><verbatim>embed:rst
This function checks if the LAMMPS library in use includes the
specific *style* of a specific *category* provided as an argument.
Valid categories are: *atom*\ , *integrate*\ , *minimize*\ ,
*pair*\ , *bond*\ , *angle*\ , *dihedral*\ , *improper*\ , *kspace*\ ,
*compute*\ , *fix*\ , *region*\ , *dump*\ , and *command*\ .
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>category of the style </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the style </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if included, 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="198" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4269" bodyend="4273" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="198" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1aef8b5d9f8c06dc22c55deb9088dbafd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_style_count</definition>
        <argsstring>(void *, const char *)</argsstring>
        <name>lammps_style_count</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>category</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Count the number of styles of category in the LAMMPS library.</para>
<para><verbatim>embed:rst
This function counts how many styles in the provided *category*
are included in the LAMMPS library in use.
Please see :cpp:func:`lammps_has_style` for a list of valid
categories.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>category of styles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of styles in category </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="199" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4290" bodyend="4294" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="199" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ab91b5c7e97982f7a804d8d7cfa0f190a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_style_name</definition>
        <argsstring>(void *, const char *, int, char *, int)</argsstring>
        <name>lammps_style_name</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>category</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look up the name of a style by index in the list of style of a given category in the LAMMPS library.</para>
<para>This function copies the name of the <emphasis>category</emphasis> style with the index <emphasis>idx</emphasis> into the provided C-style string buffer. The length of the buffer must be provided as <emphasis>buf_size</emphasis> argument. If the name of the style exceeds the length of the buffer, it will be truncated accordingly. If the index is out of range, the function returns 0 and <emphasis>buffer</emphasis> is set to an empty string, otherwise 1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>category of styles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the style in the list of <emphasis>category</emphasis> styles (0 &lt;= idx &lt; style count) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>string buffer to copy the name of the style to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the provided string buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="200" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4315" bodyend="4328" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="200" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ad1ee62546d5d560747379cba84bea178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_has_id</definition>
        <argsstring>(void *, const char *, const char *)</argsstring>
        <name>lammps_has_id</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>category</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a specific ID exists in the current LAMMPS instance</para>
<para><verbatim>embed:rst
This function checks if the current LAMMPS instance a *category* ID of
the given *name* exists.  Valid categories are: *compute*\ , *dump*\ ,
*fix*\ , *group*\ , *molecule*\ , *region*\ , and *variable*\ .

.. versionadded:: 9Oct2020</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>category of the id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if included, 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="202" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4348" bodyend="4395" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="202" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1aaa1311b9ce55c53bfae199c2ee9cb955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_id_count</definition>
        <argsstring>(void *, const char *)</argsstring>
        <name>lammps_id_count</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>category</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Count the number of IDs of a category.</para>
<para><verbatim>embed:rst
This function counts how many IDs in the provided *category*
are defined in the current LAMMPS instance.
Please see :cpp:func:`lammps_has_id` for a list of valid
categories.

.. versionadded:: 9Oct2020</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>category of IDs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of IDs in category </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="203" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4415" bodyend="4433" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="203" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a42ba710155bca355ba451fd45dcda0f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_id_name</definition>
        <argsstring>(void *, const char *, int, char *, int)</argsstring>
        <name>lammps_id_name</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>category</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look up the name of an ID by index in the list of IDs of a given category.</para>
<para><verbatim>embed:rst
This function copies the name of the *category* ID with the index
*idx* into the provided C-style string buffer.  The length of the buffer
must be provided as *buf_size* argument.  If the name of the style
exceeds the length of the buffer, it will be truncated accordingly.
If the index is out of range, the function returns 0 and *buffer* is
set to an empty string, otherwise 1.

.. versionadded:: 9Oct2020</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>category of IDs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the ID in the list of <emphasis>category</emphasis> styles (0 &lt;= idx &lt; count) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>string buffer to copy the name of the style to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the provided string buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="204" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4458" bodyend="4500" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="204" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ad12aad3df456f3c85418ff8af6e55e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_encode_image_flags</definition>
        <argsstring>(int ix, int iy, int iz)</argsstring>
        <name>lammps_encode_image_flags</name>
        <param>
          <type>int</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encode three integer image flags into a single imageint.</para>
<para><verbatim>embed:rst

The prototype for this function when compiling with ``-DLAMMPS_BIGBIG``
is:

.. code-block:: c

   int64_t lammps_encode_image_flags(int ix, int iy, int iz);

This function performs the bit-shift, addition, and bit-wise OR
operations necessary to combine the values of three integers
representing the image flags in x-, y-, and z-direction.  Unless
LAMMPS is compiled with -DLAMMPS_BIGBIG, those integers are
limited 10-bit signed integers [-512, 511].  Otherwise the return
type changes from ``int`` to ``int64_t`` and the valid range for
the individual image flags becomes [-1048576,1048575],
i.e. that of a 21-bit signed integer.  There is no check on whether
the arguments conform to these requirements.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ix</parametername>
</parameternamelist>
<parameterdescription>
<para>image flag value in x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iy</parametername>
</parameternamelist>
<parameterdescription>
<para>image flag value in y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iz</parametername>
</parameternamelist>
<parameterdescription>
<para>image flag value in z </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>encoded image flag integer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="211" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4534" bodyend="4540" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="211" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1ae774bc2a40ffa11e7a7aecfac7a9c3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_decode_image_flags</definition>
        <argsstring>(int image, int *flags)</argsstring>
        <name>lammps_decode_image_flags</name>
        <param>
          <type>int</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decode a single image flag integer into three regular integers</para>
<para><verbatim>embed:rst

The prototype for this function when compiling with ``-DLAMMPS_BIGBIG``
is:

.. code-block:: c

   void lammps_decode_image_flags(int64_t image, int *flags);

This function does the reverse operation of
:cpp:func:`lammps_encode_image_flags` and takes an image flag integer
does the bit-shift and bit-masking operations to decode it and stores
the resulting three regular integers into the buffer pointed to by
*flags*.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded image flag integer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage where the decoded image flags are stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="212" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4566" bodyend="4571" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="212" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a5dedd30e61c11330e5b088d7d75c9ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_decode_image_flags</definition>
        <argsstring>(int64_t image, int *flags)</argsstring>
        <name>lammps_decode_image_flags</name>
        <param>
          <type>int64_t</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="215" column="6" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="215" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a6118af5f0ccb5e16ee090a9bbfae3633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_set_fix_external_callback</definition>
        <argsstring>(void *, char *, FixExternalFnPtr, void *)</argsstring>
        <name>lammps_set_fix_external_callback</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>FixExternalFnPtr</type>
          <declname>callback_ptr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>caller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="220" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4578" bodyend="4604" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="220" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a8ab671d3fc2c9e70cde0f52294c6c040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_fix_external_set_energy_global</definition>
        <argsstring>(void *, char *, double)</argsstring>
        <name>lammps_fix_external_set_energy_global</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>energy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="228" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4607" bodyend="4627" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="228" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a8d64140e88dac282853bbf369c2df78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_fix_external_set_virial_global</definition>
        <argsstring>(void *, char *, double *)</argsstring>
        <name>lammps_fix_external_set_virial_global</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>virial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="229" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4630" bodyend="4650" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="229" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1aa521d27718fc92e9a58a255ae9f9cf87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>lammps_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free memory buffer allocated by LAMMPS.</para>
<para><verbatim>embed:rst

Some of the LAMMPS C library interface functions return data as pointer
to a buffer that has been allocated by LAMMPS or the library interface.
This function can be used to delete those in order to avoid memory
leaks.</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data allocated by LAMMPS </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="231" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4667" bodyend="4670" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="231" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a96130bd0ac1fcfbb01f56fe92f8cf7da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_is_running</definition>
        <argsstring>(void *handle)</argsstring>
        <name>lammps_is_running</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if LAMMPS is currently inside a run or minimization</para>
<para>This function can be used from signal handlers or multi-threaded applications to determine if the LAMMPS instance is currently active.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if idle or &gt;0 if active </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="233" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4682" bodyend="4686" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="233" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a298dbff8f43185d82bcbf0a8d76b9aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lammps_force_timeout</definition>
        <argsstring>(void *handle)</argsstring>
        <name>lammps_force_timeout</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Force a timeout to cleanly stop an ongoing run</para>
<para>This function can be used from signal handlers or multi-threaded applications to cleanly terminate an ongoing run.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="234" column="6" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4695" bodyend="4699" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="234" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a6f2f23eeafb8d56983ef90ad55e0c37d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_has_error</definition>
        <argsstring>(void *handle)</argsstring>
        <name>lammps_has_error</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if there is a (new) error message available</para>
<para><verbatim>embed:rst
This function can be used to query if an error inside of LAMMPS
has thrown a :ref:`C++ exception &lt;exceptions&gt;`.

.. note::

   This function will always report &quot;no error&quot; when the LAMMPS library
   has been compiled without ``-DLAMMPS_EXCEPTIONS`` which turns fatal
   errors aborting LAMMPS into a C++ exceptions. You can use the library
   function :cpp:func:`lammps_config_has_exceptions` to check if this is
   the case.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on no error, 1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="236" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4723" bodyend="4731" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="236" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="library_8h_1a1900bdb6311f7f9649b5c82e20257cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lammps_get_last_error_message</definition>
        <argsstring>(void *handle, char *buffer, int buf_size)</argsstring>
        <name>lammps_get_last_error_message</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the last error message into the provided buffer</para>
<para><verbatim>embed:rst
This function can be used to retrieve the error message that was set
in the event of an error inside of LAMMPS which resulted in a
:ref:`C++ exception &lt;exceptions&gt;`.  A suitable buffer for a C-style
string has to be provided and its length.  If the internally stored
error message is longer, it will be truncated accordingly.  The return
value of the function corresponds to the kind of error: a &quot;1&quot; indicates
an error that occurred on all MPI ranks and is often recoverable, while
a &quot;2&quot; indicates an abort that would happen only in a single MPI rank
and thus may not be recoverable as other MPI ranks may be waiting on
the failing MPI ranks to send messages.

.. note::

   This function will do nothing when the LAMMPS library has been
   compiled without ``-DLAMMPS_EXCEPTIONS`` which turns errors aborting
   LAMMPS into a C++ exceptions.  You can use the library function
   :cpp:func:`lammps_config_has_exceptions` to check if this is the case.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a previously created LAMMPS instance cast to <computeroutput>void *</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>string buffer to copy the error message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the provided string buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 when all ranks had the error, 2 on a single rank error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" line="237" column="5" bodyfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.cpp" bodystart="4762" bodyend="4776" declfile="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h" declline="237" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c<sp/>-*-<sp/>------------------------------------------------------------</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>LAMMPS<sp/>-<sp/>Large-scale<sp/>Atomic/Molecular<sp/>Massively<sp/>Parallel<sp/>Simulator</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/>http://lammps.sandia.gov,<sp/>Sandia<sp/>National<sp/>Laboratories</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/>Steve<sp/>Plimpton,<sp/>sjplimp@sandia.gov</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/>Copyright<sp/>(2003)<sp/>Sandia<sp/>Corporation.<sp/><sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>DE-AC04-94AL85000<sp/>with<sp/>Sandia<sp/>Corporation,<sp/>the<sp/>U.S.<sp/>Government<sp/>retains</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.<sp/><sp/>This<sp/>software<sp/>is<sp/>distributed<sp/>under</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>See<sp/>the<sp/>README<sp/>file<sp/>in<sp/>the<sp/>top-level<sp/>LAMMPS<sp/>directory.</highlight></codeline>
<codeline lineno="12"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LAMMPS_LIBRARY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LAMMPS_LIBRARY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>C<sp/>style<sp/>library<sp/>interface<sp/>to<sp/>LAMMPS<sp/>which<sp/>allows<sp/>to<sp/>create<sp/>and</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>control<sp/>instances<sp/>of<sp/>the<sp/>LAMMPS<sp/>C++<sp/>class<sp/>and<sp/>exchange<sp/>data<sp/>with<sp/>it.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>The<sp/>C<sp/>bindings<sp/>are<sp/>the<sp/>basis<sp/>for<sp/>the<sp/>Python<sp/>and<sp/>Fortran<sp/>modules.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>If<sp/>needed,<sp/>new<sp/>LAMMPS-specific<sp/>functions<sp/>can<sp/>be<sp/>added<sp/>to<sp/>expose</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>additional<sp/>LAMMPS<sp/>functionality<sp/>to<sp/>this<sp/>library<sp/>interface.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>We<sp/>follow<sp/>the<sp/>behavior<sp/>of<sp/>regular<sp/>LAMMPS<sp/>compilation<sp/>and<sp/>assume</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>-DLAMMPS_SMALLBIG<sp/>when<sp/>no<sp/>define<sp/>is<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>!defined(LAMMPS_BIGBIG)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/>&amp;&amp;<sp/>!defined(LAMMPS_SMALLBIG)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/>&amp;&amp;<sp/>!defined(LAMMPS_SMALLSMALL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LAMMPS_SMALLBIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>To<sp/>allow<sp/>including<sp/>the<sp/>library<sp/>interface<sp/>without<sp/>MPI<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LAMMPS_LIB_MPI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mpi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LAMMPS_BIGBIG)<sp/>||<sp/>defined(LAMMPS_SMALLBIG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>int64_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_LMP_DATATYPE_CONST<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>LAMMPS_INT<sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>LAMMPS_INT_2D<sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>LAMMPS_DOUBLE<sp/>=<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>LAMMPS_DOUBLE_2D<sp/>=<sp/>3,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>LAMMPS_INT64<sp/>=<sp/>4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>LAMMPS_INT64_2D<sp/>=<sp/>5,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>LAMMPS_STRING<sp/>=<sp/>6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_LMP_STYLE_CONST<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>LMP_STYLE_GLOBAL=0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>LMP_STYLE_ATOM<sp/><sp/>=1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>LMP_STYLE_LOCAL<sp/>=2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_LMP_TYPE_CONST<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>LMP_TYPE_SCALAR=0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>LMP_TYPE_VECTOR=1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>LMP_TYPE_ARRAY<sp/>=2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>LMP_SIZE_VECTOR=3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>LMP_SIZE_ROWS<sp/><sp/>=4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>LMP_SIZE_COLS<sp/><sp/>=5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ifdefs<sp/>to<sp/>allow<sp/>this<sp/>file<sp/>to<sp/>be<sp/>included<sp/>in<sp/>C<sp/>and<sp/>C++<sp/>programs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>Library<sp/>functions<sp/>to<sp/>create/destroy<sp/>an<sp/>instance<sp/>of<sp/>LAMMPS</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LAMMPS_LIB_MPI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lammps_open(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/>MPI_Comm<sp/>comm,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**ptr);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lammps_open_no_mpi(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**ptr);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lammps_open_fortran(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f_comm);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>lammps_close(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>lammps_mpi_init();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>lammps_mpi_finalize();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>Library<sp/>functions<sp/>to<sp/>process<sp/>commands</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>lammps_file(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lammps_command(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmd);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>lammps_commands_list(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncmd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**cmds);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>lammps_commands_string(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>Library<sp/>functions<sp/>to<sp/>extract<sp/>info<sp/>from<sp/>LAMMPS<sp/>or<sp/>set<sp/>data<sp/>in<sp/>LAMMPS</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>-----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lammps_get_natoms(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lammps_get_thermo(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*keyword);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_extract_box(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*boxlo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*boxhi,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xy,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yz,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xz,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pflags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*boxflag);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_reset_box(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*boxlo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*boxhi,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xy,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yz,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xz);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_memory_usage(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*meminfo);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>lammps_get_mpi_comm(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>lammps_extract_setting(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*keyword);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>lammps_extract_global_datatype(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lammps_extract_global(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>Library<sp/>functions<sp/>to<sp/>read<sp/>or<sp/>modify<sp/>per-atom<sp/>data<sp/>in<sp/>LAMMPS</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_extract_atom_datatype(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*lammps_extract_atom(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>Library<sp/>functions<sp/>to<sp/>access<sp/>data<sp/>from<sp/>computes,<sp/>fixes,<sp/>variables<sp/>in<sp/>LAMMPS</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lammps_extract_compute(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lammps_extract_fix(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lammps_extract_variable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>lammps_set_variable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>Library<sp/>functions<sp/>for<sp/>scatter/gather<sp/>operations<sp/>of<sp/>data</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_gather_atoms(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_gather_atoms_concat(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_gather_atoms_subset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ids,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_scatter_atoms(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_scatter_atoms_subset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ids,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_gather(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_gather_concat(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_gather_subset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ids,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_scatter(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_scatter_subset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ids,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(LAMMPS_BIGBIG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>lammps_create_atoms(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*type,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*image,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bexpand);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>lammps_create_atoms(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>int64_t<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*type,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/>int64_t*<sp/>image,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bexpand);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>Library<sp/>functions<sp/>for<sp/>accessing<sp/>neighbor<sp/>lists</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_find_pair_neighlist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*style,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exact,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsub,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>request);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_find_fix_neighlist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>request);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_find_compute_neighlist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>request);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_neighlist_num_elements(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_neighlist_element_neighbors(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>element,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*iatom,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*numneigh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**neighbors);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>Library<sp/>functions<sp/>for<sp/>retrieving<sp/>configuration<sp/>information</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>lammps_version(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_get_os_info(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_size);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_config_has_mpi_support();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_config_has_gzip_support();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_config_has_png_support();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_config_has_jpeg_support();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_config_has_ffmpeg_support();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_config_has_exceptions();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_config_has_package(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_config_package_count();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_config_package_name(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_has_style(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_style_count(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_style_name(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_has_id(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_id_count(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_id_name(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>Utility<sp/>functions</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(LAMMPS_BIGBIG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_encode_image_flags(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iz);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_decode_image_flags(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*flags);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">int64_t<sp/>lammps_encode_image_flags(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iz);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_decode_image_flags(int64_t<sp/>image,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*flags);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LAMMPS_BIGBIG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*FixExternalFnPtr)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int64_t,<sp/>int,<sp/>int64_t<sp/>*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_set_fix_external_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>FixExternalFnPtr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(LAMMPS_SMALLBIG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*FixExternalFnPtr)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int64_t,<sp/>int,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_set_fix_external_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>FixExternalFnPtr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*FixExternalFnPtr)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/>int,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_set_fix_external_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>FixExternalFnPtr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_fix_external_set_energy_global(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_fix_external_set_virial_global(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>lammps_is_running(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lammps_force_timeout(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_has_error(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lammps_get_last_error_message(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_size);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LAMMPS_LIBRARY_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ERROR/WARNING<sp/>messages:</highlight></codeline>
<codeline lineno="246"><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">E:<sp/>Library<sp/>error:<sp/>issuing<sp/>LAMMPS<sp/>command<sp/>during<sp/>run</highlight></codeline>
<codeline lineno="248"><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment">UNDOCUMENTED</highlight></codeline>
<codeline lineno="250"><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment">W:<sp/>Library<sp/>error<sp/>in<sp/>lammps_gather_atoms</highlight></codeline>
<codeline lineno="252"><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment">This<sp/>library<sp/>function<sp/>cannot<sp/>be<sp/>used<sp/>if<sp/>atom<sp/>IDs<sp/>are<sp/>not<sp/>defined</highlight></codeline>
<codeline lineno="254"><highlight class="comment">or<sp/>are<sp/>not<sp/>consecutively<sp/>numbered.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment">W:<sp/>lammps_gather_atoms:<sp/>unknown<sp/>property<sp/>name</highlight></codeline>
<codeline lineno="257"><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment">UNDOCUMENTED</highlight></codeline>
<codeline lineno="259"><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment">W:<sp/>Library<sp/>error<sp/>in<sp/>lammps_gather_atoms_subset</highlight></codeline>
<codeline lineno="261"><highlight class="comment"></highlight></codeline>
<codeline lineno="262"><highlight class="comment">UNDOCUMENTED</highlight></codeline>
<codeline lineno="263"><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">W:<sp/>lammps_gather_atoms_subset:<sp/>unknown<sp/>property<sp/>name</highlight></codeline>
<codeline lineno="265"><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment">UNDOCUMENTED</highlight></codeline>
<codeline lineno="267"><highlight class="comment"></highlight></codeline>
<codeline lineno="268"><highlight class="comment">W:<sp/>Library<sp/>error<sp/>in<sp/>lammps_scatter_atoms</highlight></codeline>
<codeline lineno="269"><highlight class="comment"></highlight></codeline>
<codeline lineno="270"><highlight class="comment">This<sp/>library<sp/>function<sp/>cannot<sp/>be<sp/>used<sp/>if<sp/>atom<sp/>IDs<sp/>are<sp/>not<sp/>defined<sp/>or</highlight></codeline>
<codeline lineno="271"><highlight class="comment">are<sp/>not<sp/>consecutively<sp/>numbered,<sp/>or<sp/>if<sp/>no<sp/>atom<sp/>map<sp/>is<sp/>defined.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="272"><highlight class="comment">atom_modify<sp/>command<sp/>for<sp/>details<sp/>about<sp/>atom<sp/>maps.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"></highlight></codeline>
<codeline lineno="274"><highlight class="comment">W:<sp/>lammps_scatter_atoms:<sp/>unknown<sp/>property<sp/>name</highlight></codeline>
<codeline lineno="275"><highlight class="comment"></highlight></codeline>
<codeline lineno="276"><highlight class="comment">UNDOCUMENTED</highlight></codeline>
<codeline lineno="277"><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">W:<sp/>Library<sp/>error<sp/>in<sp/>lammps_scatter_atoms_subset</highlight></codeline>
<codeline lineno="279"><highlight class="comment"></highlight></codeline>
<codeline lineno="280"><highlight class="comment">UNDOCUMENTED</highlight></codeline>
<codeline lineno="281"><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">W:<sp/>lammps_scatter_atoms_subset:<sp/>unknown<sp/>property<sp/>name</highlight></codeline>
<codeline lineno="283"><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment">UNDOCUMENTED</highlight></codeline>
<codeline lineno="285"><highlight class="comment"></highlight></codeline>
<codeline lineno="286"><highlight class="comment">W:<sp/>Library<sp/>error<sp/>in<sp/>lammps_create_atoms</highlight></codeline>
<codeline lineno="287"><highlight class="comment"></highlight></codeline>
<codeline lineno="288"><highlight class="comment">UNDOCUMENTED</highlight></codeline>
<codeline lineno="289"><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment">W:<sp/>Library<sp/>warning<sp/>in<sp/>lammps_create_atoms,<sp/>invalid<sp/>total<sp/>atoms<sp/>%ld<sp/>%ld</highlight></codeline>
<codeline lineno="291"><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment">UNDOCUMENTED</highlight></codeline>
<codeline lineno="293"><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Local<sp/>Variables:</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>fill-column:<sp/>72</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>End:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/library.h"/>
  </compounddef>
</doxygen>
