<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="atom_8cpp" kind="file" language="C++">
    <compoundname>atom.cpp</compoundname>
    <innernamespace refid="namespaceMathConst">MathConst</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>LAMMPS<sp/>-<sp/>Large-scale<sp/>Atomic/Molecular<sp/>Massively<sp/>Parallel<sp/>Simulator</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/>https://lammps.sandia.gov/,<sp/>Sandia<sp/>National<sp/>Laboratories</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/>Steve<sp/>Plimpton,<sp/>sjplimp@sandia.gov</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/>Copyright<sp/>(2003)<sp/>Sandia<sp/>Corporation.<sp/><sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>DE-AC04-94AL85000<sp/>with<sp/>Sandia<sp/>Corporation,<sp/>the<sp/>U.S.<sp/>Government<sp/>retains</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.<sp/><sp/>This<sp/>software<sp/>is<sp/>distributed<sp/>under</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>See<sp/>the<sp/>README<sp/>file<sp/>in<sp/>the<sp/>top-level<sp/>LAMMPS<sp/>directory.</highlight></codeline>
<codeline lineno="12"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;atom.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;atom_vec.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;style_atom.h&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>keep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;comm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;compute.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;domain.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fix.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;force.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;group.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;input.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;math_const.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;modify.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;molecule.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;neighbor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;update.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;variable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;library.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LMP_USER_INTEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;neigh_request.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">LAMMPS_NS;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">MathConst;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DELTA<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DELTA_PERATOM<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EPSILON<sp/>1.0e-6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><ref refid="classLAMMPS__NS_1_1Atom_1a0d2e320788dddcb5ef150c187679f905" kindref="member">Atom::Atom</ref>(<ref refid="classLAMMPS__NS_1_1LAMMPS" kindref="compound">LAMMPS</ref><sp/>*lmp)<sp/>:<sp/><ref refid="classLAMMPS__NS_1_1Pointers" kindref="compound">Pointers</ref>(lmp)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>natoms<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>nlocal<sp/>=<sp/>nghost<sp/>=<sp/>nmax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>ntypes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>nellipsoids<sp/>=<sp/>nlines<sp/>=<sp/>ntris<sp/>=<sp/>nbodies<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>nbondtypes<sp/>=<sp/>nangletypes<sp/>=<sp/>ndihedraltypes<sp/>=<sp/>nimpropertypes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>nbonds<sp/>=<sp/>nangles<sp/>=<sp/>ndihedrals<sp/>=<sp/>nimpropers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>firstgroupname<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>sortfreq<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>nextsort<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>userbinsize<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>maxbin<sp/>=<sp/>maxnext<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>binhead<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>permute<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>structure<sp/>with<sp/>info<sp/>on<sp/>per-atom<sp/>vectors/arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>nperatom<sp/>=<sp/>maxperatom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>peratom<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1st<sp/>customization<sp/>section:<sp/>customize<sp/>by<sp/>adding<sp/>new<sp/>per-atom<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>tag<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>type<sp/>=<sp/>mask<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>v<sp/>=<sp/>f<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>charged<sp/>and<sp/>dipolar<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>q<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>mu<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finite-size<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>omega<sp/>=<sp/>angmom<sp/>=<sp/>torque<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>radius<sp/>=<sp/>rmass<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>ellipsoid<sp/>=<sp/>line<sp/>=<sp/>tri<sp/>=<sp/>body<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>molecular<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>molecule<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>molindex<sp/>=<sp/>molatom<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>bond_per_atom<sp/>=<sp/><sp/>extra_bond_per_atom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>num_bond<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>bond_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>bond_atom<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>angle_per_atom<sp/>=<sp/>extra_angle_per_atom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>num_angle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>angle_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>angle_atom1<sp/>=<sp/>angle_atom2<sp/>=<sp/>angle_atom3<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>dihedral_per_atom<sp/>=<sp/>extra_dihedral_per_atom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>num_dihedral<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>dihedral_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>dihedral_atom1<sp/>=<sp/>dihedral_atom2<sp/>=<sp/>dihedral_atom3<sp/>=<sp/>dihedral_atom4<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>improper_per_atom<sp/>=<sp/>extra_improper_per_atom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>num_improper<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>improper_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>improper_atom1<sp/>=<sp/>improper_atom2<sp/>=<sp/>improper_atom3<sp/>=<sp/>improper_atom4<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>maxspecial<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>nspecial<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>special<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PERI<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>vfrac<sp/>=<sp/>s0<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SPIN<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>sp<sp/>=<sp/>fm<sp/>=<sp/>fm_long<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-EFF<sp/>and<sp/>USER-AWPMD<sp/>packages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>spin<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>eradius<sp/>=<sp/>ervel<sp/>=<sp/>erforce<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>ervelforce<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>cs<sp/>=<sp/>csforce<sp/>=<sp/>vforce<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>etag<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-DPD<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>uCond<sp/>=<sp/>uMech<sp/>=<sp/>uChem<sp/>=<sp/>uCG<sp/>=<sp/>uCGnew<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>duChem<sp/>=<sp/>dpdTheta<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-MESO<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>cc<sp/>=<sp/>cc_flux<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>edpd_temp<sp/>=<sp/>edpd_flux<sp/>=<sp/>edpd_cv<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-MESONT<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>buckling<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>bond_nt<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-SMD<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>contact_radius<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>smd_data_9<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>smd_stress<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>eff_plastic_strain<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>eff_plastic_strain_rate<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>damage<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-SPH<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>rho<sp/>=<sp/>drho<sp/>=<sp/>esph<sp/>=<sp/>desph<sp/>=<sp/>cv<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>vest<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>customization<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>user-defined<sp/>molecules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>nmolecule<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>molecules<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>custom<sp/>atom<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>nivector<sp/>=<sp/>ndvector<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>ivector<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>dvector<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>iname<sp/>=<sp/>dname<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>atom<sp/>style<sp/>and<sp/>array<sp/>existence<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>set_atomflag_defaults();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>peratom<sp/>data<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>peratom_create();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ntype-length<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>mass<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>mass_setflag<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>callback<sp/>lists<sp/>&amp;<sp/>extra<sp/>restart<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>nextra_grow<sp/>=<sp/>nextra_restart<sp/>=<sp/>nextra_border<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>extra_grow<sp/>=<sp/>extra_restart<sp/>=<sp/>extra_border<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>nextra_grow_max<sp/>=<sp/>nextra_restart_max<sp/>=<sp/>nextra_border_max<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>nextra_store<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>extra<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>atom<sp/>ID<sp/>and<sp/>mapping<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>tag_enable<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>map_style<sp/>=<sp/>map_user<sp/>=<sp/>MAP_NONE;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>map_tag_max<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>map_maxarray<sp/>=<sp/>map_nhash<sp/>=<sp/>map_nbucket<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>max_same<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>sametag<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>map_array<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>map_bucket<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>map_hash<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>unique_tags<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>atom_style<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>avec<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>avec_map<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AtomVecCreatorMap();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ATOM_CLASS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AtomStyle(key,Class)<sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/>(*avec_map)[#key]<sp/>=<sp/>&amp;avec_creator&lt;Class&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;style_atom.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>AtomStyle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ATOM_CLASS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">Atom::~Atom()</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>atom_style;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>avec;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>avec_map;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>firstgroupname;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(binhead);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(next);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(permute);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(tag);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(type);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(mask);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(image);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(x);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(v);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(f);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>peratom<sp/>data<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nperatom;<sp/>i++)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>peratom[i].name;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>memory-&gt;sfree(peratom);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>custom<sp/>atom<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nivector;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>iname[i];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;destroy(ivector[i]);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dvector<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndvector;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>dname[i];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memory-&gt;destroy(dvector[i]);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>memory-&gt;sfree(iname);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>memory-&gt;sfree(dname);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>memory-&gt;sfree(ivector);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>memory-&gt;sfree(dvector);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>user-defined<sp/>molecules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nmolecule;<sp/>i++)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>molecules[i];</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>memory-&gt;sfree(molecules);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>per-type<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mass;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mass_setflag;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>extra<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(extra_grow);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(extra_restart);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(extra_border);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(extra);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>mapping<sp/>data<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>map_delete();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>unique_tags;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/>copy<sp/>modify<sp/>settings<sp/>from<sp/>old<sp/>Atom<sp/>class<sp/>to<sp/>current<sp/>Atom<sp/>class</highlight></codeline>
<codeline lineno="331"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::settings(<ref refid="classLAMMPS__NS_1_1Atom" kindref="compound">Atom</ref><sp/>*old)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>tag_enable<sp/>=<sp/>old-&gt;tag_enable;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>map_user<sp/>=<sp/>old-&gt;map_user;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>map_style<sp/>=<sp/>old-&gt;map_style;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>sortfreq<sp/>=<sp/>old-&gt;sortfreq;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>userbinsize<sp/>=<sp/>old-&gt;userbinsize;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old-&gt;firstgroupname)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(old-&gt;firstgroupname)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>firstgroupname<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(firstgroupname,old-&gt;firstgroupname);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/>one-time<sp/>creation<sp/>of<sp/>peratom<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="349"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::peratom_create()</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nperatom;<sp/>i++)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>peratom[i].name;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>memory-&gt;sfree(peratom);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>peratom<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>nperatom<sp/>=<sp/>maxperatom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2nd<sp/>customization<sp/>section:<sp/>add<sp/>peratom<sp/>variables<sp/>here,<sp/>order<sp/>does<sp/>not<sp/>matter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>tagint<sp/>&amp;<sp/>imageint<sp/>variables<sp/>as<sp/>INT<sp/>or<sp/>BIGINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tagintsize<sp/>=<sp/>INT;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tagint)<sp/>==<sp/>8)<sp/>tagintsize<sp/>=<sp/>BIGINT;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imageintsize<sp/>=<sp/>INT;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(imageint)<sp/>==<sp/>8)<sp/>imageintsize<sp/>=<sp/>BIGINT;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,&amp;tag,tagintsize,0);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,&amp;type,INT,0);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;mask&quot;</highlight><highlight class="normal">,&amp;mask,INT,0);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;image&quot;</highlight><highlight class="normal">,&amp;image,imageintsize,0);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,&amp;x,DOUBLE,3);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,&amp;v,DOUBLE,3);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,&amp;f,DOUBLE,3,1);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>per-thread<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;rmass&quot;</highlight><highlight class="normal">,&amp;rmass,DOUBLE,0);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">,&amp;q,DOUBLE,0);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">,&amp;mu,DOUBLE,4);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;mu3&quot;</highlight><highlight class="normal">,&amp;mu,DOUBLE,3);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>first<sp/>3<sp/>values<sp/>of<sp/>mu[4]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finite<sp/>size<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;radius&quot;</highlight><highlight class="normal">,&amp;radius,DOUBLE,0);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;omega&quot;</highlight><highlight class="normal">,&amp;omega,DOUBLE,3);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;torque&quot;</highlight><highlight class="normal">,&amp;torque,DOUBLE,3,1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>per-thread<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;angmom&quot;</highlight><highlight class="normal">,&amp;angmom,DOUBLE,3);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;ellipsoid&quot;</highlight><highlight class="normal">,&amp;ellipsoid,INT,0);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,&amp;line,INT,0);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;tri&quot;</highlight><highlight class="normal">,&amp;tri,INT,0);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">,&amp;body,INT,0);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MOLECULE<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;molecule&quot;</highlight><highlight class="normal">,&amp;molecule,tagintsize,0);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;molindex&quot;</highlight><highlight class="normal">,&amp;molindex,INT,0);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;molatom&quot;</highlight><highlight class="normal">,&amp;molatom,INT,0);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;nspecial&quot;</highlight><highlight class="normal">,&amp;nspecial,INT,3);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;special&quot;</highlight><highlight class="normal">,&amp;special,tagintsize,&amp;maxspecial,&amp;nspecial,3);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;num_bond&quot;</highlight><highlight class="normal">,&amp;num_bond,INT,0);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;bond_type&quot;</highlight><highlight class="normal">,&amp;bond_type,INT,&amp;bond_per_atom,&amp;num_bond);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;bond_atom&quot;</highlight><highlight class="normal">,&amp;bond_atom,tagintsize,&amp;bond_per_atom,&amp;num_bond);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;num_angle&quot;</highlight><highlight class="normal">,&amp;num_angle,INT,0);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;angle_type&quot;</highlight><highlight class="normal">,&amp;angle_type,INT,&amp;angle_per_atom,&amp;num_angle);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;angle_atom1&quot;</highlight><highlight class="normal">,&amp;angle_atom1,tagintsize,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;angle_per_atom,&amp;num_angle);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;angle_atom2&quot;</highlight><highlight class="normal">,&amp;angle_atom2,tagintsize,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;angle_per_atom,&amp;num_angle);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;angle_atom3&quot;</highlight><highlight class="normal">,&amp;angle_atom3,tagintsize,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;angle_per_atom,&amp;num_angle);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;num_dihedral&quot;</highlight><highlight class="normal">,&amp;num_dihedral,INT,0);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;dihedral_type&quot;</highlight><highlight class="normal">,&amp;dihedral_type,INT,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dihedral_per_atom,&amp;num_dihedral);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;dihedral_atom1&quot;</highlight><highlight class="normal">,&amp;dihedral_atom1,tagintsize,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dihedral_per_atom,&amp;num_dihedral);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;dihedral_atom2&quot;</highlight><highlight class="normal">,&amp;dihedral_atom2,tagintsize,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dihedral_per_atom,&amp;num_dihedral);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;dihedral_atom3&quot;</highlight><highlight class="normal">,&amp;dihedral_atom3,tagintsize,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dihedral_per_atom,&amp;num_dihedral);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;dihedral_atom4&quot;</highlight><highlight class="normal">,&amp;dihedral_atom4,tagintsize,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dihedral_per_atom,&amp;num_dihedral);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;num_improper&quot;</highlight><highlight class="normal">,&amp;num_improper,INT,0);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;improper_type&quot;</highlight><highlight class="normal">,&amp;improper_type,INT,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;improper_per_atom,&amp;num_improper);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;improper_atom1&quot;</highlight><highlight class="normal">,&amp;improper_atom1,tagintsize,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;improper_per_atom,&amp;num_improper);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;improper_atom2&quot;</highlight><highlight class="normal">,&amp;improper_atom2,tagintsize,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;improper_per_atom,&amp;num_improper);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;improper_atom3&quot;</highlight><highlight class="normal">,&amp;improper_atom3,tagintsize,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;improper_per_atom,&amp;num_improper);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>add_peratom_vary(</highlight><highlight class="stringliteral">&quot;improper_atom4&quot;</highlight><highlight class="normal">,&amp;improper_atom4,tagintsize,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;improper_per_atom,&amp;num_improper);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PERI<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;vfrac&quot;</highlight><highlight class="normal">,&amp;vfrac,DOUBLE,0);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;s0&quot;</highlight><highlight class="normal">,&amp;s0,DOUBLE,0);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;x0&quot;</highlight><highlight class="normal">,&amp;x0,DOUBLE,3);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SPIN<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;sp&quot;</highlight><highlight class="normal">,&amp;sp,DOUBLE,4);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;fm&quot;</highlight><highlight class="normal">,&amp;fm,DOUBLE,3,1);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;fm_long&quot;</highlight><highlight class="normal">,&amp;fm_long,DOUBLE,3,1);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-EFF<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;spin&quot;</highlight><highlight class="normal">,&amp;spin,INT,0);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;eradius&quot;</highlight><highlight class="normal">,&amp;eradius,DOUBLE,0);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;ervel&quot;</highlight><highlight class="normal">,&amp;ervel,DOUBLE,0);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;erforce&quot;</highlight><highlight class="normal">,&amp;erforce,DOUBLE,0,1);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>per-thread<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-AWPMD<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;cs&quot;</highlight><highlight class="normal">,&amp;cs,DOUBLE,2);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;csforce&quot;</highlight><highlight class="normal">,&amp;csforce,DOUBLE,2);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;vforce&quot;</highlight><highlight class="normal">,&amp;vforce,DOUBLE,3);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;ervelforce&quot;</highlight><highlight class="normal">,&amp;ervelforce,DOUBLE,0);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;etag&quot;</highlight><highlight class="normal">,&amp;etag,INT,0);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-DPD<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;dpdTheta&quot;</highlight><highlight class="normal">,&amp;dpdTheta,DOUBLE,0);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;uCond&quot;</highlight><highlight class="normal">,&amp;uCond,DOUBLE,0);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;uMech&quot;</highlight><highlight class="normal">,&amp;uMech,DOUBLE,0);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;uChem&quot;</highlight><highlight class="normal">,&amp;uChem,DOUBLE,0);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;uCG&quot;</highlight><highlight class="normal">,&amp;uCG,DOUBLE,0);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;uCGnew&quot;</highlight><highlight class="normal">,&amp;uCGnew,DOUBLE,0);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;duChem&quot;</highlight><highlight class="normal">,&amp;duChem,DOUBLE,0);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-MESO<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;edpd_cv&quot;</highlight><highlight class="normal">,&amp;edpd_cv,DOUBLE,0);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;edpd_temp&quot;</highlight><highlight class="normal">,&amp;edpd_temp,DOUBLE,0);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;vest_temp&quot;</highlight><highlight class="normal">,&amp;vest_temp,DOUBLE,0);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;edpd_flux&quot;</highlight><highlight class="normal">,&amp;edpd_flux,DOUBLE,0,1);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>per-thread<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;cc&quot;</highlight><highlight class="normal">,&amp;cc,DOUBLE,1);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;cc_flux&quot;</highlight><highlight class="normal">,&amp;cc_flux,DOUBLE,1,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>per-thread<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-MESONT<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">,&amp;length,DOUBLE,0);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;buckling&quot;</highlight><highlight class="normal">,&amp;buckling,INT,0);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;bond_nt&quot;</highlight><highlight class="normal">,&amp;bond_nt,tagintsize,2);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-SPH<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;rho&quot;</highlight><highlight class="normal">,&amp;rho,DOUBLE,0);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;drho&quot;</highlight><highlight class="normal">,&amp;drho,DOUBLE,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>per-thread<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;esph&quot;</highlight><highlight class="normal">,&amp;esph,DOUBLE,0);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;desph&quot;</highlight><highlight class="normal">,&amp;desph,DOUBLE,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>per-thread<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;vest&quot;</highlight><highlight class="normal">,&amp;vest,DOUBLE,3);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;cv&quot;</highlight><highlight class="normal">,&amp;cv,DOUBLE,0);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-SMD<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;contact_radius&quot;</highlight><highlight class="normal">,&amp;contact_radius,DOUBLE,0);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;smd_data_9&quot;</highlight><highlight class="normal">,&amp;smd_data_9,DOUBLE,1);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;smd_stress&quot;</highlight><highlight class="normal">,&amp;smd_stress,DOUBLE,1);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;eff_plastic_strain&quot;</highlight><highlight class="normal">,&amp;eff_plastic_strain,DOUBLE,0);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;eff_plastic_strain_rate&quot;</highlight><highlight class="normal">,&amp;eff_plastic_strain_rate,DOUBLE,0);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>add_peratom(</highlight><highlight class="stringliteral">&quot;damage&quot;</highlight><highlight class="normal">,&amp;damage,DOUBLE,0);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>customization<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/><sp/>add<sp/>info<sp/>for<sp/>a<sp/>single<sp/>per-atom<sp/>vector/array<sp/>to<sp/>PerAtom<sp/>data<sp/>struct</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/><sp/>cols<sp/>=<sp/>0:<sp/>per-atom<sp/>vector</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/>cols<sp/>=<sp/>N:<sp/>static<sp/>per-atom<sp/>array<sp/>with<sp/>N<sp/>columns</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/>use<sp/>add_peratom_vary()<sp/>when<sp/>column<sp/>count<sp/>varies<sp/>per<sp/>atom</highlight></codeline>
<codeline lineno="520"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::add_peratom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datatype,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threadflag)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nperatom<sp/>==<sp/>maxperatom)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>maxperatom<sp/>+=<sp/>DELTA_PERATOM;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>peratom<sp/>=<sp/>(PerAtom<sp/>*)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memory-&gt;srealloc(peratom,maxperatom*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PerAtom),</highlight><highlight class="stringliteral">&quot;atom:peratom&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(name)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>peratom[nperatom].name<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>strcpy(peratom[nperatom].name,name);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>peratom[nperatom].address<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>peratom[nperatom].datatype<sp/>=<sp/>datatype;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>peratom[nperatom].cols<sp/>=<sp/>cols;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>peratom[nperatom].threadflag<sp/>=<sp/>threadflag;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>peratom[nperatom].address_length<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>nperatom++;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/>change<sp/>the<sp/>column<sp/>count<sp/>of<sp/>an<sp/>existing<sp/>peratom<sp/>array<sp/>entry</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/>allows<sp/>atom_style<sp/>to<sp/>specify<sp/>column<sp/>count<sp/>as<sp/>an<sp/>argument</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/>see<sp/>atom_style<sp/>tdpd<sp/>as<sp/>an<sp/>example</highlight></codeline>
<codeline lineno="547"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::add_peratom_change_columns(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nperatom;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,peratom[i].name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peratom[i].cols<sp/>=<sp/>cols;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>name<sp/>of<sp/>peratom<sp/>array<sp/>for<sp/>column<sp/>change&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/>add<sp/>info<sp/>for<sp/>a<sp/>single<sp/>per-atom<sp/>array<sp/>to<sp/>PerAtom<sp/>data<sp/>struct</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/>cols<sp/>=<sp/>address<sp/>of<sp/>int<sp/>variable<sp/>with<sp/>max<sp/>columns<sp/>per<sp/>atom</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/>for<sp/>collength<sp/>=<sp/>0:</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>address<sp/>of<sp/>peratom<sp/>vector<sp/>with<sp/>column<sp/>count<sp/>per<sp/>atom</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>e.g.<sp/>num_bond</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/>for<sp/>collength<sp/>=<sp/>N:</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>address<sp/>of<sp/>peratom<sp/>array<sp/>with<sp/>column<sp/>count<sp/>per<sp/>atom</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>collength<sp/>=<sp/>index<sp/>of<sp/>column<sp/>(1<sp/>to<sp/>N)<sp/>in<sp/>peratom<sp/>array<sp/>with<sp/>count</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>e.g.<sp/>nspecial</highlight></codeline>
<codeline lineno="570"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::add_peratom_vary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datatype,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*cols,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*length,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>collength)</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nperatom<sp/>==<sp/>maxperatom)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>maxperatom<sp/>+=<sp/>DELTA_PERATOM;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>peratom<sp/>=<sp/>(PerAtom<sp/>*)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memory-&gt;srealloc(peratom,maxperatom*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PerAtom),</highlight><highlight class="stringliteral">&quot;atom:peratom&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(name)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>peratom[nperatom].name<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>strcpy(peratom[nperatom].name,name);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>peratom[nperatom].address<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>peratom[nperatom].datatype<sp/>=<sp/>datatype;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>peratom[nperatom].cols<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>peratom[nperatom].threadflag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>peratom[nperatom].address_maxcols<sp/>=<sp/>cols;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>peratom[nperatom].address_length<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>peratom[nperatom].collength<sp/>=<sp/>collength;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>nperatom++;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/>add<sp/>info<sp/>for<sp/>a<sp/>single<sp/>per-atom<sp/>array<sp/>to<sp/>PerAtom<sp/>data<sp/>struct</highlight></codeline>
<codeline lineno="597"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::set_atomflag_defaults()</highlight></codeline>
<codeline lineno="600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3rd<sp/>customization<sp/>section:<sp/>customize<sp/>by<sp/>adding<sp/>new<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>identical<sp/>list<sp/>as<sp/>2nd<sp/>customization<sp/>in<sp/>atom.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>sphere_flag<sp/>=<sp/>ellipsoid_flag<sp/>=<sp/>line_flag<sp/>=<sp/>tri_flag<sp/>=<sp/>body_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>peri_flag<sp/>=<sp/>electron_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>wavepacket_flag<sp/>=<sp/>sph_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>molecule_flag<sp/>=<sp/>molindex_flag<sp/>=<sp/>molatom_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>q_flag<sp/>=<sp/>mu_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>rmass_flag<sp/>=<sp/>radius_flag<sp/>=<sp/>omega_flag<sp/>=<sp/>torque_flag<sp/>=<sp/>angmom_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>vfrac_flag<sp/>=<sp/>spin_flag<sp/>=<sp/>eradius_flag<sp/>=<sp/>ervel_flag<sp/>=<sp/>erforce_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>cs_flag<sp/>=<sp/>csforce_flag<sp/>=<sp/>vforce_flag<sp/>=<sp/>ervelforce_flag<sp/>=<sp/>etag_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>rho_flag<sp/>=<sp/>esph_flag<sp/>=<sp/>cv_flag<sp/>=<sp/>vest_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>dpd_flag<sp/>=<sp/>edpd_flag<sp/>=<sp/>tdpd_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>sp_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>x0_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>smd_flag<sp/>=<sp/>damage_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>mesont_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>contact_radius_flag<sp/>=<sp/>smd_data_9_flag<sp/>=<sp/>smd_stress_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>eff_plastic_strain_flag<sp/>=<sp/>eff_plastic_strain_rate_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>pdscale<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/>create<sp/>an<sp/>AtomVec<sp/>style</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/>called<sp/>from<sp/>lammps.cpp,<sp/>input<sp/>script,<sp/>restart<sp/>file,<sp/>replicate</highlight></codeline>
<codeline lineno="628"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::create_avec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;style,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>narg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**arg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trysuffix)</highlight></codeline>
<codeline lineno="631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>atom_style;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avec)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>avec;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>atom_style<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>avec<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unset<sp/>atom<sp/>style<sp/>and<sp/>array<sp/>existence<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>have<sp/>been<sp/>set<sp/>by<sp/>old<sp/>avec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>set_atomflag_defaults();</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>instance<sp/>of<sp/>AtomVec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>grow()<sp/>to<sp/>initialize<sp/>atom-based<sp/>arrays<sp/>to<sp/>length<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>so<sp/>that<sp/>x[0][0]<sp/>can<sp/>always<sp/>be<sp/>referenced<sp/>even<sp/>if<sp/>proc<sp/>has<sp/>no<sp/>atoms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sflag;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>avec<sp/>=<sp/>new_avec(style,trysuffix,sflag);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>avec-&gt;store_args(narg,arg);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>avec-&gt;process_args(narg,arg);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>avec-&gt;grow(1);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sflag)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>estyle<sp/>=<sp/>style<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sflag<sp/>==<sp/>1)<sp/>estyle<sp/>+=<sp/>lmp-&gt;suffix;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>estyle<sp/>+=<sp/>lmp-&gt;suffix2;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>atom_style<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[estyle.size()+1];</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(atom_style,estyle.c_str());</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>atom_style<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[style.size()+1];</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(atom_style,style.c_str());</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>molecular<sp/>system:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>atom<sp/>IDs<sp/>must<sp/>be<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>atom<sp/>map<sp/>to<sp/>be<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>map<sp/>style<sp/>will<sp/>be<sp/>reset<sp/>to<sp/>array<sp/>vs<sp/>hash<sp/>to<sp/>by<sp/>map_init()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>molecular<sp/>=<sp/>avec-&gt;molecular;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(molecular<sp/>&amp;&amp;<sp/>tag_enable<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Atom<sp/>IDs<sp/>must<sp/>be<sp/>used<sp/>for<sp/>molecular<sp/>systems&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(molecular<sp/>!=<sp/>Atom::ATOMIC)<sp/>map_style<sp/>=<sp/>MAP_YES;</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/>generate<sp/>an<sp/>AtomVec<sp/>class,<sp/>first<sp/>with<sp/>suffix<sp/>appended</highlight></codeline>
<codeline lineno="676"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal">AtomVec<sp/>*Atom::new_avec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;style,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trysuffix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;sflag)</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trysuffix<sp/>&amp;&amp;<sp/>lmp-&gt;suffix_enable)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lmp-&gt;suffix)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sflag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>estyle<sp/>=<sp/>style<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>lmp-&gt;suffix;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avec_map-&gt;find(estyle)<sp/>!=<sp/>avec_map-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AtomVecCreator<sp/>&amp;avec_creator<sp/>=<sp/>(*avec_map)[estyle];</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avec_creator(lmp);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lmp-&gt;suffix2)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sflag<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>estyle<sp/>=<sp/>style<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>lmp-&gt;suffix2;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avec_map-&gt;find(estyle)<sp/>!=<sp/>avec_map-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AtomVecCreator<sp/>&amp;avec_creator<sp/>=<sp/>(*avec_map)[estyle];</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avec_creator(lmp);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>sflag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avec_map-&gt;find(style)<sp/>!=<sp/>avec_map-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>AtomVecCreator<sp/>&amp;avec_creator<sp/>=<sp/>(*avec_map)[style];</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avec_creator(lmp);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>error-&gt;all(FLERR,utils::check_packages_for_style(</highlight><highlight class="stringliteral">&quot;atom&quot;</highlight><highlight class="normal">,style,lmp));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/>one<sp/>instance<sp/>per<sp/>AtomVec<sp/>style<sp/>in<sp/>style_atom.h</highlight></codeline>
<codeline lineno="712"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="715"><highlight class="normal">AtomVec<sp/>*Atom::avec_creator(<ref refid="classLAMMPS__NS_1_1LAMMPS" kindref="compound">LAMMPS</ref><sp/>*lmp)</highlight></codeline>
<codeline lineno="716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(lmp);</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::init()</highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>extra<sp/>array<sp/>since<sp/>it<sp/>doesn&apos;t<sp/>persist<sp/>past<sp/>first<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextra_store)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;destroy(extra);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>extra<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>nextra_store<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>arrays<sp/>that<sp/>are<sp/>atom<sp/>type<sp/>in<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>check_mass(FLERR);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>of<sp/>firstgroup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(firstgroupname)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>firstgroup<sp/>=<sp/>group-&gt;find(firstgroupname);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(firstgroup<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>atom_modify<sp/>first<sp/>group<sp/>ID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>firstgroup<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>AtomVec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>avec-&gt;init();</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::setup()</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>bins<sp/>for<sp/>sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>do<sp/>this<sp/>in<sp/>init()<sp/>because<sp/>uses<sp/>neighbor<sp/>cutoff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sortfreq<sp/>&gt;<sp/>0)<sp/>setup_sort_bins();</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/><sp/>return<sp/>ptr<sp/>to<sp/>AtomVec<sp/>class<sp/>if<sp/>matches<sp/>style<sp/>or<sp/>to<sp/>matching<sp/>hybrid<sp/>sub-class</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/>return<sp/>nullptr<sp/>if<sp/>no<sp/>match</highlight></codeline>
<codeline lineno="762"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">AtomVec<sp/>*Atom::style_match(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*style)</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(atom_style,style)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avec;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(atom_style,</highlight><highlight class="stringliteral">&quot;hybrid&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avec_hybrid<sp/>=<sp/>(AtomVecHybrid<sp/>*)<sp/>avec;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>avec_hybrid-&gt;nstyles;<sp/>i++)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(avec_hybrid-&gt;keywords[i],style)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avec_hybrid-&gt;styles[i];</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/><sp/>modify<sp/>parameters<sp/>of<sp/>the<sp/>atom<sp/>style</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/><sp/><sp/>some<sp/>options<sp/>can<sp/>only<sp/>be<sp/>invoked<sp/>before<sp/>simulation<sp/>box<sp/>is<sp/>defined</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/><sp/>first<sp/>and<sp/>sort<sp/>options<sp/>cannot<sp/>be<sp/>used<sp/>together</highlight></codeline>
<codeline lineno="780"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::modify_params(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>narg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**arg)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(narg<sp/>==<sp/>0)<sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>atom_modify<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iarg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iarg<sp/>&lt;<sp/>narg)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg],</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iarg+2<sp/>&gt;<sp/>narg)<sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>atom_modify<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;box_exist)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Atom_modify<sp/>id<sp/>command<sp/>after<sp/>simulation<sp/>box<sp/>is<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg+1],</highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>tag_enable<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg+1],</highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>tag_enable<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>atom_modify<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iarg<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg],</highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iarg+2<sp/>&gt;<sp/>narg)<sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>atom_modify<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;box_exist)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Atom_modify<sp/>map<sp/>command<sp/>after<sp/>simulation<sp/>box<sp/>is<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg+1],</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>map_user<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg+1],</highlight><highlight class="stringliteral">&quot;hash&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>map_user<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg+1],</highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>map_user<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>atom_modify<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map_style<sp/>=<sp/>map_user;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iarg<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg],</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iarg+2<sp/>&gt;<sp/>narg)<sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>atom_modify<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg+1],</highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>firstgroupname;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstgroupname<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(arg[iarg+1])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstgroupname<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(firstgroupname,arg[iarg+1]);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sortfreq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iarg<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(arg[iarg],</highlight><highlight class="stringliteral">&quot;sort&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iarg+3<sp/>&gt;<sp/>narg)<sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>atom_modify<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sortfreq<sp/>=<sp/>utils::inumeric(FLERR,arg[iarg+1],</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>userbinsize<sp/>=<sp/>utils::numeric(FLERR,arg[iarg+2],</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sortfreq<sp/>&lt;<sp/>0<sp/>||<sp/>userbinsize<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>atom_modify<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sortfreq<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>firstgroupname)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Atom_modify<sp/>sort<sp/>and<sp/>first<sp/>options<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>be<sp/>used<sp/>together&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iarg<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>atom_modify<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>atom<sp/>IDs<sp/>are<sp/>valid</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/>error<sp/>if<sp/>any<sp/>atom<sp/>ID<sp/>&lt;<sp/>0<sp/>or<sp/>atom<sp/>ID<sp/>=<sp/>MAXTAGINT</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/>if<sp/>any<sp/>atom<sp/>ID<sp/>&gt;<sp/>0,<sp/>error<sp/>if<sp/>any<sp/>atom<sp/>ID<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/>if<sp/>any<sp/>atom<sp/>ID<sp/>&gt;<sp/>0,<sp/>error<sp/>if<sp/>tag_enable<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/>if<sp/>all<sp/>atom<sp/>IDs<sp/>=<sp/>0,<sp/>tag_enable<sp/>must<sp/>be<sp/>0</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/>if<sp/>max<sp/>atom<sp/>IDs<sp/>&lt;<sp/>natoms,<sp/>must<sp/>be<sp/>duplicates</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/><sp/>OK<sp/>if<sp/>max<sp/>atom<sp/>IDs<sp/>&gt;<sp/>natoms</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/>NOTE:<sp/>not<sp/>fully<sp/>checking<sp/>that<sp/>atom<sp/>IDs<sp/>are<sp/>unique</highlight></codeline>
<codeline lineno="843"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::tag_check()</highlight></codeline>
<codeline lineno="846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>tagint<sp/>min<sp/>=<sp/>MAXTAGINT;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>tagint<sp/>max<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/>MIN(min,tag[i]);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>MAX(max,tag[i]);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>tagint<sp/>minall,maxall;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;min,&amp;minall,1,MPI_LMP_TAGINT,MPI_MIN,world);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;max,&amp;maxall,1,MPI_LMP_TAGINT,MPI_MAX,world);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minall<sp/>&lt;<sp/>0)<sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;One<sp/>or<sp/>more<sp/>Atom<sp/>IDs<sp/>is<sp/>negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxall<sp/>&gt;=<sp/>MAXTAGINT)<sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;One<sp/>or<sp/>more<sp/>atom<sp/>IDs<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxall<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>minall<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;One<sp/>or<sp/>more<sp/>atom<sp/>IDs<sp/>is<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxall<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>tag_enable<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Non-zero<sp/>atom<sp/>IDs<sp/>with<sp/>atom_modify<sp/>id<sp/>=<sp/>no&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxall<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>natoms<sp/>&amp;&amp;<sp/>tag_enable)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;All<sp/>atom<sp/>IDs<sp/>=<sp/>0<sp/>but<sp/>atom_modify<sp/>id<sp/>=<sp/>yes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tag_enable<sp/>&amp;&amp;<sp/>maxall<sp/>&lt;<sp/>natoms)</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>atom<sp/>IDs<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/>add<sp/>unique<sp/>tags<sp/>to<sp/>any<sp/>atoms<sp/>with<sp/>tag<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/>new<sp/>tags<sp/>are<sp/>grouped<sp/>by<sp/>proc<sp/>and<sp/>start<sp/>after<sp/>max<sp/>current<sp/>tag</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/>called<sp/>after<sp/>creating<sp/>new<sp/>atoms</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/>error<sp/>if<sp/>new<sp/>tags<sp/>will<sp/>exceed<sp/>MAXTAGINT</highlight></codeline>
<codeline lineno="876"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::tag_extend()</highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maxtag_all<sp/>=<sp/>max<sp/>tag<sp/>for<sp/>all<sp/>atoms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>tagint<sp/>maxtag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/>maxtag<sp/>=<sp/>MAX(maxtag,tag[i]);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>tagint<sp/>maxtag_all;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;maxtag,&amp;maxtag_all,1,MPI_LMP_TAGINT,MPI_MAX,world);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DEBUG:<sp/>useful<sp/>for<sp/>generating<sp/>64-bit<sp/>IDs<sp/>even<sp/>for<sp/>small<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>only<sp/>when<sp/>LAMMPS<sp/>is<sp/>compiled<sp/>with<sp/>BIGBIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//maxtag_all<sp/>+=<sp/>1000000000000;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>notag<sp/>=<sp/>#<sp/>of<sp/>atoms<sp/>I<sp/>own<sp/>with<sp/>no<sp/>tag<sp/>(tag<sp/>=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>notag_sum<sp/>=<sp/>#<sp/>of<sp/>total<sp/>atoms<sp/>on<sp/>procs<sp/>&lt;=<sp/>me<sp/>with<sp/>no<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>bigint<sp/>notag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tag[i]<sp/>==<sp/>0)<sp/>notag++;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>bigint<sp/>notag_total;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;notag,&amp;notag_total,1,MPI_LMP_BIGINT,MPI_SUM,world);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notag_total<sp/>&gt;=<sp/>MAXTAGINT)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;New<sp/>atom<sp/>IDs<sp/>exceed<sp/>maximum<sp/>allowed<sp/>ID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>bigint<sp/>notag_sum;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>MPI_Scan(&amp;notag,&amp;notag_sum,1,MPI_LMP_BIGINT,MPI_SUM,world);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>itag<sp/>=<sp/>1st<sp/>new<sp/>tag<sp/>that<sp/>my<sp/>untagged<sp/>atoms<sp/>should<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>tagint<sp/>itag<sp/>=<sp/>maxtag_all<sp/>+<sp/>notag_sum<sp/>-<sp/>notag<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tag[i]<sp/>==<sp/>0)<sp/>tag[i]<sp/>=<sp/>itag++;</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>atom<sp/>IDs<sp/>span<sp/>range<sp/>from<sp/>1<sp/>to<sp/>Natoms<sp/>inclusive</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/>return<sp/>0<sp/>if<sp/>mintag<sp/>!=<sp/>1<sp/>or<sp/>maxtag<sp/>!=<sp/>Natoms</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/>return<sp/>1<sp/>if<sp/>OK</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/>doesn&apos;t<sp/>actually<sp/>check<sp/>if<sp/>all<sp/>tag<sp/>values<sp/>are<sp/>used</highlight></codeline>
<codeline lineno="917"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Atom::tag_consecutive()</highlight></codeline>
<codeline lineno="920"><highlight class="normal">{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>tagint<sp/>idmin<sp/>=<sp/>MAXTAGINT;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>tagint<sp/>idmax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>idmin<sp/>=<sp/>MIN(idmin,tag[i]);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>idmax<sp/>=<sp/>MAX(idmax,tag[i]);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>tagint<sp/>idminall,idmaxall;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;idmin,&amp;idminall,1,MPI_LMP_TAGINT,MPI_MIN,world);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;idmax,&amp;idmaxall,1,MPI_LMP_TAGINT,MPI_MAX,world);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idminall<sp/>!=<sp/>1<sp/>||<sp/>idmaxall<sp/>!=<sp/>natoms)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>bonus<sp/>data<sp/>settings<sp/>are<sp/>valid</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/><sp/><sp/>error<sp/>if<sp/>number<sp/>of<sp/>atoms<sp/>with<sp/>ellipsoid/line/tri/body<sp/>flags</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/><sp/><sp/>are<sp/>consistent<sp/>with<sp/>global<sp/>setting.</highlight></codeline>
<codeline lineno="940"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::bonus_check()</highlight></codeline>
<codeline lineno="943"><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>bigint<sp/>local_ellipsoids<sp/>=<sp/>0,<sp/>local_lines<sp/>=<sp/>0,<sp/>local_tris<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>bigint<sp/>local_bodies<sp/>=<sp/>0,<sp/>num_global;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ellipsoid<sp/>&amp;&amp;<sp/>(ellipsoid[i]<sp/>&gt;=0))<sp/>++local_ellipsoids;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>&amp;&amp;<sp/>(line[i]<sp/>&gt;=0))<sp/>++local_lines;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tri<sp/>&amp;&amp;<sp/>(tri[i]<sp/>&gt;=0))<sp/>++local_tris;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(body<sp/>&amp;&amp;<sp/>(body[i]<sp/>&gt;=0))<sp/>++local_bodies;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;local_ellipsoids,&amp;num_global,1,MPI_LMP_BIGINT,MPI_SUM,world);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nellipsoids<sp/>!=<sp/>num_global)</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>&apos;ellipsoids&apos;<sp/>header<sp/>value<sp/>and<sp/>number<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atoms<sp/>with<sp/>enabled<sp/>ellipsoid<sp/>flags&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;local_lines,&amp;num_global,1,MPI_LMP_BIGINT,MPI_SUM,world);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlines<sp/>!=<sp/>num_global)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>&apos;lines&apos;<sp/>header<sp/>value<sp/>and<sp/>number<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atoms<sp/>with<sp/>enabled<sp/>line<sp/>flags&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;local_tris,&amp;num_global,1,MPI_LMP_BIGINT,MPI_SUM,world);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ntris<sp/>!=<sp/>num_global)</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>&apos;tris&apos;<sp/>header<sp/>value<sp/>and<sp/>number<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atoms<sp/>with<sp/>enabled<sp/>tri<sp/>flags&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;local_bodies,&amp;num_global,1,MPI_LMP_BIGINT,MPI_SUM,world);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbodies<sp/>!=<sp/>num_global)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>&apos;bodies&apos;<sp/>header<sp/>value<sp/>and<sp/>number<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atoms<sp/>with<sp/>enabled<sp/>body<sp/>flags&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/><sp/><sp/>deallocate<sp/>molecular<sp/>topology<sp/>arrays</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/><sp/>done<sp/>before<sp/>realloc<sp/>with<sp/>(possibly)<sp/>new<sp/>2nd<sp/>dimension<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>correctly<sp/>initialized<sp/>per-atom<sp/>values,<sp/>e.g.<sp/>bond_per_atom</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/>needs<sp/>to<sp/>be<sp/>called<sp/>whenever<sp/>2nd<sp/>dimensions<sp/>are<sp/>changed</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>and<sp/>these<sp/>arrays<sp/>are<sp/>already<sp/>pre-allocated,</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>e.g.<sp/>due<sp/>to<sp/>grow(1)<sp/>in<sp/>create_avec()</highlight></codeline>
<codeline lineno="982"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::deallocate_topology()</highlight></codeline>
<codeline lineno="985"><highlight class="normal">{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;bond_type);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;bond_atom);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>atom-&gt;bond_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>atom-&gt;bond_atom<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;angle_type);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;angle_atom1);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;angle_atom2);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;angle_atom3);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>atom-&gt;angle_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>atom-&gt;angle_atom1<sp/>=<sp/>atom-&gt;angle_atom2<sp/>=<sp/>atom-&gt;angle_atom3<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;dihedral_type);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;dihedral_atom1);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;dihedral_atom2);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;dihedral_atom3);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;dihedral_atom4);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>atom-&gt;dihedral_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>atom-&gt;dihedral_atom1<sp/>=<sp/>atom-&gt;dihedral_atom2<sp/>=</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>atom-&gt;dihedral_atom3<sp/>=<sp/>atom-&gt;dihedral_atom4<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;improper_type);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;improper_atom1);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;improper_atom2);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;improper_atom3);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>memory-&gt;destroy(atom-&gt;improper_atom4);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>atom-&gt;improper_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>atom-&gt;improper_atom1<sp/>=<sp/>atom-&gt;improper_atom2<sp/>=</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>atom-&gt;improper_atom3<sp/>=<sp/>atom-&gt;improper_atom4<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/><sp/>unpack<sp/>N<sp/>lines<sp/>from<sp/>Atom<sp/>section<sp/>of<sp/>data<sp/>file</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/><sp/>call<sp/>style-specific<sp/>routine<sp/>to<sp/>parse<sp/>line</highlight></codeline>
<codeline lineno="1020"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::data_atoms(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>tagint<sp/>id_offset,<sp/>tagint<sp/>mol_offset,</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shiftflag,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*shift)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,xptr,iptr;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>imageint<sp/>imagedata;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xdata[3],lamda[3];</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*coord;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nwords<sp/>=<sp/>utils::trim_and_count_words(buf);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nwords<sp/>!=<sp/>avec-&gt;size_data_atom<sp/>&amp;&amp;<sp/>nwords<sp/>!=<sp/>avec-&gt;size_data_atom<sp/>+<sp/>3)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>atom<sp/>format<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**values<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*[nwords];</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>bounds<sp/>for<sp/>my<sp/>proc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>periodic<sp/>and<sp/>I<sp/>am<sp/>lo/hi<sp/>proc,<sp/>adjust<sp/>bounds<sp/>by<sp/>EPSILON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insures<sp/>all<sp/>data<sp/>atoms<sp/>will<sp/>be<sp/>owned<sp/>even<sp/>with<sp/>round-off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>triclinic<sp/>=<sp/>domain-&gt;triclinic;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon[3];</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(triclinic)<sp/>epsilon[0]<sp/>=<sp/>epsilon[1]<sp/>=<sp/>epsilon[2]<sp/>=<sp/>EPSILON;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>epsilon[0]<sp/>=<sp/>domain-&gt;prd[0]<sp/>*<sp/>EPSILON;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>epsilon[1]<sp/>=<sp/>domain-&gt;prd[1]<sp/>*<sp/>EPSILON;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>epsilon[2]<sp/>=<sp/>domain-&gt;prd[2]<sp/>*<sp/>EPSILON;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sublo[3],subhi[3];</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(triclinic<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>sublo[0]<sp/>=<sp/>domain-&gt;sublo[0];<sp/>subhi[0]<sp/>=<sp/>domain-&gt;subhi[0];</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>sublo[1]<sp/>=<sp/>domain-&gt;sublo[1];<sp/>subhi[1]<sp/>=<sp/>domain-&gt;subhi[1];</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>sublo[2]<sp/>=<sp/>domain-&gt;sublo[2];<sp/>subhi[2]<sp/>=<sp/>domain-&gt;subhi[2];</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>sublo[0]<sp/>=<sp/>domain-&gt;sublo_lamda[0];<sp/>subhi[0]<sp/>=<sp/>domain-&gt;subhi_lamda[0];</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>sublo[1]<sp/>=<sp/>domain-&gt;sublo_lamda[1];<sp/>subhi[1]<sp/>=<sp/>domain-&gt;subhi_lamda[1];</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>sublo[2]<sp/>=<sp/>domain-&gt;sublo_lamda[2];<sp/>subhi[2]<sp/>=<sp/>domain-&gt;subhi_lamda[2];</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;layout<sp/>!=<sp/>Comm::LAYOUT_TILED)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;xperiodic)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;myloc[0]<sp/>==<sp/>0)<sp/>sublo[0]<sp/>-=<sp/>epsilon[0];</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;myloc[0]<sp/>==<sp/>comm-&gt;procgrid[0]-1)<sp/>subhi[0]<sp/>+=<sp/>epsilon[0];</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;yperiodic)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;myloc[1]<sp/>==<sp/>0)<sp/>sublo[1]<sp/>-=<sp/>epsilon[1];</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;myloc[1]<sp/>==<sp/>comm-&gt;procgrid[1]-1)<sp/>subhi[1]<sp/>+=<sp/>epsilon[1];</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;zperiodic)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;myloc[2]<sp/>==<sp/>0)<sp/>sublo[2]<sp/>-=<sp/>epsilon[2];</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;myloc[2]<sp/>==<sp/>comm-&gt;procgrid[2]-1)<sp/>subhi[2]<sp/>+=<sp/>epsilon[2];</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;xperiodic)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;mysplit[0][0]<sp/>==<sp/>0.0)<sp/>sublo[0]<sp/>-=<sp/>epsilon[0];</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;mysplit[0][1]<sp/>==<sp/>1.0)<sp/>subhi[0]<sp/>+=<sp/>epsilon[0];</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;yperiodic)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;mysplit[1][0]<sp/>==<sp/>0.0)<sp/>sublo[1]<sp/>-=<sp/>epsilon[1];</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;mysplit[1][1]<sp/>==<sp/>1.0)<sp/>subhi[1]<sp/>+=<sp/>epsilon[1];</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;zperiodic)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;mysplit[2][0]<sp/>==<sp/>0.0)<sp/>sublo[2]<sp/>-=<sp/>epsilon[2];</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;mysplit[2][1]<sp/>==<sp/>1.0)<sp/>subhi[2]<sp/>+=<sp/>epsilon[2];</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>xptr<sp/>=<sp/>which<sp/>word<sp/>in<sp/>line<sp/>starts<sp/>xyz<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iptr<sp/>=<sp/>which<sp/>word<sp/>in<sp/>line<sp/>starts<sp/>ix,iy,iz<sp/>image<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>xptr<sp/>=<sp/>avec-&gt;xcol_data<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imageflag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nwords<sp/>&gt;<sp/>avec-&gt;size_data_atom)<sp/>imageflag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imageflag)<sp/>iptr<sp/>=<sp/>nwords<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>lines<sp/>of<sp/>atom<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tokenize<sp/>the<sp/>line<sp/>into<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>xyz<sp/>coords<sp/>and<sp/>image<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remap<sp/>atom<sp/>into<sp/>simulation<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>atom<sp/>is<sp/>in<sp/>my<sp/>sub-domain,<sp/>unpack<sp/>its<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flagx<sp/>=<sp/>0,<sp/>flagy<sp/>=<sp/>0,<sp/>flagz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>values[0]<sp/>=<sp/>strtok(buf,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(values[0]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>atom<sp/>format<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(m<sp/>=<sp/>1;<sp/>m<sp/>&lt;<sp/>nwords;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values[m]<sp/>=<sp/>strtok(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(values[m]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>atom<sp/>format<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imx<sp/>=<sp/>0,<sp/>imy<sp/>=<sp/>0,<sp/>imz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imageflag)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imx<sp/>=<sp/>utils::inumeric(FLERR,values[iptr],</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imy<sp/>=<sp/>utils::inumeric(FLERR,values[iptr+1],</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imz<sp/>=<sp/>utils::inumeric(FLERR,values[iptr+2],</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((domain-&gt;dimension<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(imz<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Z-direction<sp/>image<sp/>flag<sp/>must<sp/>be<sp/>0<sp/>for<sp/>2d-systems&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!domain-&gt;xperiodic)<sp/>&amp;&amp;<sp/>(imx<sp/>!=<sp/>0))<sp/>flagx<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!domain-&gt;yperiodic)<sp/>&amp;&amp;<sp/>(imy<sp/>!=<sp/>0))<sp/>flagy<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!domain-&gt;zperiodic)<sp/>&amp;&amp;<sp/>(imz<sp/>!=<sp/>0))<sp/>flagz<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>imagedata<sp/>=<sp/>((imageint)<sp/>(imx<sp/>+<sp/>IMGMAX)<sp/>&amp;<sp/>IMGMASK)<sp/>|</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((imageint)<sp/>(imy<sp/>+<sp/>IMGMAX)<sp/>&amp;<sp/>IMGMASK)<sp/>&lt;&lt;<sp/>IMGBITS)<sp/>|</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((imageint)<sp/>(imz<sp/>+<sp/>IMGMAX)<sp/>&amp;<sp/>IMGMASK)<sp/>&lt;&lt;<sp/>IMG2BITS);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>xdata[0]<sp/>=<sp/>utils::numeric(FLERR,values[xptr],</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>xdata[1]<sp/>=<sp/>utils::numeric(FLERR,values[xptr+1],</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>xdata[2]<sp/>=<sp/>utils::numeric(FLERR,values[xptr+2],</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shiftflag)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xdata[0]<sp/>+=<sp/>shift[0];</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xdata[1]<sp/>+=<sp/>shift[1];</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xdata[2]<sp/>+=<sp/>shift[2];</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>domain-&gt;remap(xdata,imagedata);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(triclinic)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>domain-&gt;x2lamda(xdata,lamda);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>coord<sp/>=<sp/>lamda;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>coord<sp/>=<sp/>xdata;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coord[0]<sp/>&gt;=<sp/>sublo[0]<sp/>&amp;&amp;<sp/>coord[0]<sp/>&lt;<sp/>subhi[0]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coord[1]<sp/>&gt;=<sp/>sublo[1]<sp/>&amp;&amp;<sp/>coord[1]<sp/>&lt;<sp/>subhi[1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coord[2]<sp/>&gt;=<sp/>sublo[2]<sp/>&amp;&amp;<sp/>coord[2]<sp/>&lt;<sp/>subhi[2])<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>avec-&gt;data_atom(xdata,imagedata,values);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_offset)<sp/>tag[nlocal-1]<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mol_offset)<sp/>molecule[nlocal-1]<sp/>+=<sp/>mol_offset;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_offset)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type[nlocal-1]<sp/>+=<sp/>type_offset;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type[nlocal-1]<sp/>&gt;<sp/>ntypes)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>atom<sp/>type<sp/>in<sp/>Atoms<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>warn<sp/>if<sp/>reading<sp/>data<sp/>with<sp/>non-zero<sp/>image<sp/>flags<sp/>for<sp/>non-periodic<sp/>boundaries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>may<sp/>want<sp/>to<sp/>turn<sp/>this<sp/>into<sp/>an<sp/>error<sp/>at<sp/>some<sp/>point,<sp/>since<sp/>this<sp/>essentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>creates<sp/>invalid<sp/>position<sp/>information<sp/>that<sp/>works<sp/>by<sp/>accident<sp/>most<sp/>of<sp/>the<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;me<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flagx)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;warning(FLERR,</highlight><highlight class="stringliteral">&quot;Non-zero<sp/>imageflag(s)<sp/>in<sp/>x<sp/>direction<sp/>for<sp/>non-periodic<sp/>boundary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flagy)</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;warning(FLERR,</highlight><highlight class="stringliteral">&quot;Non-zero<sp/>imageflag(s)<sp/>in<sp/>y<sp/>direction<sp/>for<sp/>non-periodic<sp/>boundary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flagz)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;warning(FLERR,</highlight><highlight class="stringliteral">&quot;Non-zero<sp/>imageflag(s)<sp/>in<sp/>z<sp/>direction<sp/>for<sp/>non-periodic<sp/>boundary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>values;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/><sp/><sp/>unpack<sp/>N<sp/>lines<sp/>from<sp/>Velocity<sp/>section<sp/>of<sp/>data<sp/>file</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>atom<sp/>IDs<sp/>are<sp/>&gt;<sp/>0<sp/>and<sp/>&lt;=<sp/>map_tag_max</highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/><sp/><sp/>call<sp/>style-specific<sp/>routine<sp/>to<sp/>parse<sp/>line</highlight></codeline>
<codeline lineno="1188"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::data_vels(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>tagint<sp/>id_offset)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,m;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>tagint<sp/>tagdata;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nwords<sp/>=<sp/>utils::trim_and_count_words(buf);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nwords<sp/>!=<sp/>avec-&gt;size_data_vel)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>velocity<sp/>format<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**values<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*[nwords];</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>lines<sp/>of<sp/>atom<sp/>velocities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tokenize<sp/>the<sp/>line<sp/>into<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>I<sp/>own<sp/>atom<sp/>tag,<sp/>unpack<sp/>its<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>values[0]<sp/>=<sp/>strtok(buf,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>nwords;<sp/>j++)</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values[j]<sp/>=<sp/>strtok(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>tagdata<sp/>=<sp/>ATOTAGINT(values[0])<sp/>+<sp/>id_offset;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagdata<sp/>&lt;=<sp/>0<sp/>||<sp/>tagdata<sp/>&gt;<sp/>map_tag_max)</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>atom<sp/>ID<sp/>in<sp/>Velocities<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(tagdata))<sp/>&gt;=<sp/>0)<sp/>avec-&gt;data_vel(m,&amp;values[1]);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>values;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/><sp/><sp/>process<sp/>N<sp/>bonds<sp/>read<sp/>into<sp/>buf<sp/>from<sp/>data<sp/>files</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/><sp/><sp/>if<sp/>count<sp/>is<sp/>non-nullptr,<sp/>just<sp/>count<sp/>bonds<sp/>per<sp/>atom</highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/>else<sp/>store<sp/>them<sp/>with<sp/>atoms</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>atom<sp/>IDs<sp/>are<sp/>&gt;<sp/>0<sp/>and<sp/>&lt;=<sp/>map_tag_max</highlight></codeline>
<codeline lineno="1233"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::data_bonds(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count,<sp/>tagint<sp/>id_offset,</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_offset)</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,tmp,itype,rv;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>tagint<sp/>atom1,atom2;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newton_bond<sp/>=<sp/>force-&gt;newton_bond;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>sscanf(buf,</highlight><highlight class="stringliteral">&quot;%d<sp/>%d<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;tmp,&amp;itype,&amp;atom1,&amp;atom2);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>format<sp/>of<sp/>Bonds<sp/>section<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_offset)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom1<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom2<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>+=<sp/>type_offset;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((atom1<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom1<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom2<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom2<sp/>&gt;<sp/>map_tag_max)<sp/>||<sp/>(atom1<sp/>==<sp/>atom2))</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>atom<sp/>ID<sp/>in<sp/>Bonds<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itype<sp/>&lt;=<sp/>0<sp/>||<sp/>itype<sp/>&gt;<sp/>nbondtypes)</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>bond<sp/>type<sp/>in<sp/>Bonds<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom1))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bond_type[m][num_bond[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bond_atom[m][num_bond[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bond[m]++;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newton_bond<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom2))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bond_type[m][num_bond[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bond_atom[m][num_bond[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bond[m]++;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/><sp/><sp/>process<sp/>N<sp/>angles<sp/>read<sp/>into<sp/>buf<sp/>from<sp/>data<sp/>files</highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/><sp/><sp/>if<sp/>count<sp/>is<sp/>non-nullptr,<sp/>just<sp/>count<sp/>angles<sp/>per<sp/>atom</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/><sp/>else<sp/>store<sp/>them<sp/>with<sp/>atoms</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>atom<sp/>IDs<sp/>are<sp/>&gt;<sp/>0<sp/>and<sp/>&lt;=<sp/>map_tag_max</highlight></codeline>
<codeline lineno="1288"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::data_angles(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count,<sp/>tagint<sp/>id_offset,</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_offset)</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,tmp,itype,rv;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>tagint<sp/>atom1,atom2,atom3;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newton_bond<sp/>=<sp/>force-&gt;newton_bond;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>sscanf(buf,</highlight><highlight class="stringliteral">&quot;%d<sp/>%d<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT,</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;tmp,&amp;itype,&amp;atom1,&amp;atom2,&amp;atom3);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>!=<sp/>5)</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>format<sp/>of<sp/>Angles<sp/>section<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_offset)<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom1<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom2<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom3<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>+=<sp/>type_offset;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((atom1<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom1<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom2<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom2<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom3<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom3<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom1<sp/>==<sp/>atom2)<sp/>||<sp/>(atom1<sp/>==<sp/>atom3)<sp/>||<sp/>(atom2<sp/>==<sp/>atom3))</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>atom<sp/>ID<sp/>in<sp/>Angles<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itype<sp/>&lt;=<sp/>0<sp/>||<sp/>itype<sp/>&gt;<sp/>nangletypes)</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>angle<sp/>type<sp/>in<sp/>Angles<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom2))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_type[m][num_angle[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom1[m][num_angle[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom2[m][num_angle[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom3[m][num_angle[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_angle[m]++;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newton_bond<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom1))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_type[m][num_angle[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom1[m][num_angle[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom2[m][num_angle[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom3[m][num_angle[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_angle[m]++;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom3))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_type[m][num_angle[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom1[m][num_angle[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom2[m][num_angle[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom3[m][num_angle[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_angle[m]++;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1356"><highlight class="comment"><sp/><sp/><sp/>process<sp/>N<sp/>dihedrals<sp/>read<sp/>into<sp/>buf<sp/>from<sp/>data<sp/>files</highlight></codeline>
<codeline lineno="1357"><highlight class="comment"><sp/><sp/><sp/>if<sp/>count<sp/>is<sp/>non-nullptr,<sp/>just<sp/>count<sp/>diihedrals<sp/>per<sp/>atom</highlight></codeline>
<codeline lineno="1358"><highlight class="comment"><sp/><sp/><sp/>else<sp/>store<sp/>them<sp/>with<sp/>atoms</highlight></codeline>
<codeline lineno="1359"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>atom<sp/>IDs<sp/>are<sp/>&gt;<sp/>0<sp/>and<sp/>&lt;=<sp/>map_tag_max</highlight></codeline>
<codeline lineno="1360"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::data_dihedrals(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count,<sp/>tagint<sp/>id_offset,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_offset)</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,tmp,itype,rv;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>tagint<sp/>atom1,atom2,atom3,atom4;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newton_bond<sp/>=<sp/>force-&gt;newton_bond;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>sscanf(buf,</highlight><highlight class="stringliteral">&quot;%d<sp/>%d<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT,</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;tmp,&amp;itype,&amp;atom1,&amp;atom2,&amp;atom3,&amp;atom4);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>!=<sp/>6)</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>format<sp/>of<sp/>Dihedrals<sp/>section<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_offset)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom1<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom2<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom3<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom4<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>+=<sp/>type_offset;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((atom1<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom1<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom2<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom2<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom3<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom3<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom4<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom4<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom1<sp/>==<sp/>atom2)<sp/>||<sp/>(atom1<sp/>==<sp/>atom3)<sp/>||<sp/>(atom1<sp/>==<sp/>atom4)<sp/>||</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom2<sp/>==<sp/>atom3)<sp/>||<sp/>(atom2<sp/>==<sp/>atom4)<sp/>||<sp/>(atom3<sp/>==<sp/>atom4))</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>atom<sp/>ID<sp/>in<sp/>Dihedrals<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itype<sp/>&lt;=<sp/>0<sp/>||<sp/>itype<sp/>&gt;<sp/>ndihedraltypes)</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>dihedral<sp/>type<sp/>in<sp/>Dihedrals<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom2))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_type[m][num_dihedral[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom1[m][num_dihedral[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom2[m][num_dihedral[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom3[m][num_dihedral[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom4[m][num_dihedral[m]]<sp/>=<sp/>atom4;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dihedral[m]++;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newton_bond<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom1))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_type[m][num_dihedral[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom1[m][num_dihedral[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom2[m][num_dihedral[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom3[m][num_dihedral[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom4[m][num_dihedral[m]]<sp/>=<sp/>atom4;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dihedral[m]++;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom3))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_type[m][num_dihedral[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom1[m][num_dihedral[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom2[m][num_dihedral[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom3[m][num_dihedral[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom4[m][num_dihedral[m]]<sp/>=<sp/>atom4;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dihedral[m]++;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom4))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_type[m][num_dihedral[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom1[m][num_dihedral[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom2[m][num_dihedral[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom3[m][num_dihedral[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom4[m][num_dihedral[m]]<sp/>=<sp/>atom4;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dihedral[m]++;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/><sp/><sp/>process<sp/>N<sp/>impropers<sp/>read<sp/>into<sp/>buf<sp/>from<sp/>data<sp/>files</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/><sp/><sp/>if<sp/>count<sp/>is<sp/>non-nullptr,<sp/>just<sp/>count<sp/>impropers<sp/>per<sp/>atom</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/><sp/><sp/>else<sp/>store<sp/>them<sp/>with<sp/>atoms</highlight></codeline>
<codeline lineno="1450"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>atom<sp/>IDs<sp/>are<sp/>&gt;<sp/>0<sp/>and<sp/>&lt;=<sp/>map_tag_max</highlight></codeline>
<codeline lineno="1451"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::data_impropers(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count,<sp/>tagint<sp/>id_offset,</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_offset)</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,tmp,itype,rv;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>tagint<sp/>atom1,atom2,atom3,atom4;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newton_bond<sp/>=<sp/>force-&gt;newton_bond;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>sscanf(buf,</highlight><highlight class="stringliteral">&quot;%d<sp/>%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TAGINT_FORMAT<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>TAGINT_FORMAT,</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;tmp,&amp;itype,&amp;atom1,&amp;atom2,&amp;atom3,&amp;atom4);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>!=<sp/>6)</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>format<sp/>of<sp/>Impropers<sp/>section<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_offset)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom1<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom2<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom3<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atom4<sp/>+=<sp/>id_offset;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>+=<sp/>type_offset;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((atom1<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom1<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom2<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom2<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom3<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom3<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom4<sp/>&lt;=<sp/>0)<sp/>||<sp/>(atom4<sp/>&gt;<sp/>map_tag_max)<sp/>||</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom1<sp/>==<sp/>atom2)<sp/>||<sp/>(atom1<sp/>==<sp/>atom3)<sp/>||<sp/>(atom1<sp/>==<sp/>atom4)<sp/>||</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atom2<sp/>==<sp/>atom3)<sp/>||<sp/>(atom2<sp/>==<sp/>atom4)<sp/>||<sp/>(atom3<sp/>==<sp/>atom4))</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>atom<sp/>ID<sp/>in<sp/>Impropers<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itype<sp/>&lt;=<sp/>0<sp/>||<sp/>itype<sp/>&gt;<sp/>nimpropertypes)</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>improper<sp/>type<sp/>in<sp/>Impropers<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom2))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_type[m][num_improper[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom1[m][num_improper[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom2[m][num_improper[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom3[m][num_improper[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom4[m][num_improper[m]]<sp/>=<sp/>atom4;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_improper[m]++;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newton_bond<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom1))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_type[m][num_improper[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom1[m][num_improper[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom2[m][num_improper[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom3[m][num_improper[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom4[m][num_improper[m]]<sp/>=<sp/>atom4;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_improper[m]++;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom3))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_type[m][num_improper[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom1[m][num_improper[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom2[m][num_improper[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom3[m][num_improper[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom4[m][num_improper[m]]<sp/>=<sp/>atom4;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_improper[m]++;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(atom4))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>count[m]++;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_type[m][num_improper[m]]<sp/>=<sp/>itype;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom1[m][num_improper[m]]<sp/>=<sp/>atom1;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom2[m][num_improper[m]]<sp/>=<sp/>atom2;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom3[m][num_improper[m]]<sp/>=<sp/>atom3;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom4[m][num_improper[m]]<sp/>=<sp/>atom4;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_improper[m]++;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1538"><highlight class="comment"><sp/><sp/><sp/>unpack<sp/>N<sp/>lines<sp/>from<sp/>atom-style<sp/>specific<sp/>bonus<sp/>section<sp/>of<sp/>data<sp/>file</highlight></codeline>
<codeline lineno="1539"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>atom<sp/>IDs<sp/>are<sp/>&gt;<sp/>0<sp/>and<sp/>&lt;=<sp/>map_tag_max</highlight></codeline>
<codeline lineno="1540"><highlight class="comment"><sp/><sp/><sp/>call<sp/>style-specific<sp/>routine<sp/>to<sp/>parse<sp/>line</highlight></codeline>
<codeline lineno="1541"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::data_bonus(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>AtomVec<sp/>*avec_bonus,<sp/>tagint<sp/>id_offset)</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,m,tagdata;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nwords<sp/>=<sp/>utils::trim_and_count_words(buf);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nwords<sp/>!=<sp/>avec_bonus-&gt;size_data_bonus)</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Incorrect<sp/>bonus<sp/>data<sp/>format<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**values<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*[nwords];</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>lines<sp/>of<sp/>bonus<sp/>atom<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tokenize<sp/>the<sp/>line<sp/>into<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>I<sp/>own<sp/>atom<sp/>tag,<sp/>unpack<sp/>its<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strchr(buf,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>values[0]<sp/>=<sp/>strtok(buf,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>nwords;<sp/>j++)</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values[j]<sp/>=<sp/>strtok(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>tagdata<sp/>=<sp/>ATOTAGINT(values[0])<sp/>+<sp/>id_offset;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagdata<sp/>&lt;=<sp/>0<sp/>||<sp/>tagdata<sp/>&gt;<sp/>map_tag_max)</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>atom<sp/>ID<sp/>in<sp/>Bonus<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok<sp/>to<sp/>call<sp/>child&apos;s<sp/>data_atom_bonus()<sp/>method<sp/>thru<sp/>parent<sp/>avec_bonus,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>data_bonus()<sp/>was<sp/>called<sp/>with<sp/>child<sp/>ptr,<sp/>and<sp/>method<sp/>is<sp/>virtual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(tagdata))<sp/>&gt;=<sp/>0)<sp/>avec_bonus-&gt;data_atom_bonus(m,&amp;values[1]);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>values;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1585"><highlight class="comment"><sp/><sp/><sp/>unpack<sp/>N<sp/>bodies<sp/>from<sp/>Bodies<sp/>section<sp/>of<sp/>data<sp/>file</highlight></codeline>
<codeline lineno="1586"><highlight class="comment"><sp/><sp/><sp/>each<sp/>body<sp/>spans<sp/>multiple<sp/>lines</highlight></codeline>
<codeline lineno="1587"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>atom<sp/>IDs<sp/>are<sp/>&gt;<sp/>0<sp/>and<sp/>&lt;=<sp/>map_tag_max</highlight></codeline>
<codeline lineno="1588"><highlight class="comment"><sp/><sp/><sp/>call<sp/>style-specific<sp/>routine<sp/>to<sp/>parse<sp/>line</highlight></codeline>
<codeline lineno="1589"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::data_bodies(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>AtomVec<sp/>*avec_body,<sp/>tagint<sp/>id_offset)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,m,nvalues,tagdata,ninteger,ndouble;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxint<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxdouble<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ivalues<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dvalues<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unique_tags)<sp/>unique_tags<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::set&lt;tagint&gt;;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>lines<sp/>of<sp/>body<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>I<sp/>own<sp/>atom<sp/>tag,<sp/>tokenize<sp/>lines<sp/>into<sp/>ivalues/dvalues,<sp/>call<sp/>data_body()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>skip<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>tagdata<sp/>=<sp/>ATOTAGINT(strtok(buf,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">))<sp/>+<sp/>id_offset;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>tagdata<sp/>=<sp/>ATOTAGINT(strtok(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">))<sp/>+<sp/>id_offset;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagdata<sp/>&lt;=<sp/>0<sp/>||<sp/>tagdata<sp/>&gt;<sp/>map_tag_max)</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>atom<sp/>ID<sp/>in<sp/>Bodies<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unique_tags-&gt;find(tagdata)<sp/>==<sp/>unique_tags-&gt;end())</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unique_tags-&gt;insert(tagdata);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>atom<sp/>ID<sp/>in<sp/>Bodies<sp/>section<sp/>of<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>ninteger<sp/>=<sp/>utils::inumeric(FLERR,strtok(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">),</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>ndouble<sp/>=<sp/>utils::inumeric(FLERR,strtok(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">),</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>=<sp/>map(tagdata))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ninteger<sp/>&gt;<sp/>maxint)<sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>ivalues;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxint<sp/>=<sp/>ninteger;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivalues<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[maxint];</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndouble<sp/>&gt;<sp/>maxdouble)<sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>dvalues;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdouble<sp/>=<sp/>ndouble;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dvalues<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[maxdouble];</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ninteger;<sp/>j++)</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivalues[j]<sp/>=<sp/>utils::inumeric(FLERR,strtok(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">),</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ndouble;<sp/>j++)</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dvalues[j]<sp/>=<sp/>utils::numeric(FLERR,strtok(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">),</highlight><highlight class="keyword">false</highlight><highlight class="normal">,lmp);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>avec_body-&gt;data_body(m,ninteger,ndouble,ivalues,dvalues);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nvalues<sp/>=<sp/>ninteger<sp/>+<sp/>ndouble;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>values<sp/>to<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nvalues;<sp/>j++)</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strtok(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r\f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>ivalues;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>dvalues;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1652"><highlight class="comment"><sp/><sp/><sp/>init<sp/>per-atom<sp/>fix/compute/variable<sp/>values<sp/>for<sp/>newly<sp/>created<sp/>atoms</highlight></codeline>
<codeline lineno="1653"><highlight class="comment"><sp/><sp/><sp/>called<sp/>from<sp/>create_atoms,<sp/>read_data,<sp/>read_dump,</highlight></codeline>
<codeline lineno="1654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>lib::lammps_create_atoms()</highlight></codeline>
<codeline lineno="1655"><highlight class="comment"><sp/><sp/><sp/>fixes,<sp/>computes,<sp/>variables<sp/>may<sp/>or<sp/>may<sp/>not<sp/>exist<sp/>when<sp/>called</highlight></codeline>
<codeline lineno="1656"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::data_fix_compute_variable(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nnew)</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>modify-&gt;nfix;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>Fix<sp/>*fix<sp/>=<sp/>modify-&gt;fix[m];</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fix-&gt;create_attribute)</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nprev;<sp/>i<sp/>&lt;<sp/>nnew;<sp/>i++)</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix-&gt;set_arrays(i);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>modify-&gt;ncompute;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>Compute<sp/>*compute<sp/>=<sp/>modify-&gt;compute[m];</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compute-&gt;create_attribute)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nprev;<sp/>i<sp/>&lt;<sp/>nnew;<sp/>i++)</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute-&gt;set_arrays(i);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nprev;<sp/>i<sp/>&lt;<sp/>nnew;<sp/>i++)</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>input-&gt;variable-&gt;set_arrays(i);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1679"><highlight class="comment"><sp/><sp/><sp/>allocate<sp/>arrays<sp/>of<sp/>length<sp/>ntypes</highlight></codeline>
<codeline lineno="1680"><highlight class="comment"><sp/><sp/><sp/>only<sp/>done<sp/>after<sp/>ntypes<sp/>is<sp/>set</highlight></codeline>
<codeline lineno="1681"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::allocate_type_arrays()</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avec-&gt;mass_type<sp/>==<sp/>AtomVec::PER_TYPE)<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>mass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[ntypes+1];</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>mass_setflag<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[ntypes+1];</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itype<sp/>=<sp/>1;<sp/>itype<sp/>&lt;=<sp/>ntypes;<sp/>itype++)<sp/>mass_setflag[itype]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1693"><highlight class="comment"><sp/><sp/><sp/>set<sp/>a<sp/>mass<sp/>and<sp/>flag<sp/>it<sp/>as<sp/>set</highlight></codeline>
<codeline lineno="1694"><highlight class="comment"><sp/><sp/><sp/>called<sp/>from<sp/>reading<sp/>of<sp/>data<sp/>file</highlight></codeline>
<codeline lineno="1695"><highlight class="comment"><sp/><sp/><sp/>type_offset<sp/>may<sp/>be<sp/>used<sp/>when<sp/>reading<sp/>multiple<sp/>data<sp/>files</highlight></codeline>
<codeline lineno="1696"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::set_mass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_offset)</highlight></codeline>
<codeline lineno="1699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mass<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>set<sp/>mass<sp/>for<sp/>this<sp/>atom<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itype;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass_one;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>sscanf(str,</highlight><highlight class="stringliteral">&quot;%d<sp/>%lg&quot;</highlight><highlight class="normal">,&amp;itype,&amp;mass_one);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>2)<sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>mass<sp/>line<sp/>in<sp/>data<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>itype<sp/>+=<sp/>type_offset;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itype<sp/>&lt;<sp/>1<sp/>||<sp/>itype<sp/>&gt;<sp/>ntypes)</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>type<sp/>for<sp/>mass<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>mass[itype]<sp/>=<sp/>mass_one;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>mass_setflag[itype]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mass[itype]<sp/>&lt;=<sp/>0.0)<sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>mass<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1718"><highlight class="comment"><sp/><sp/><sp/>set<sp/>a<sp/>mass<sp/>and<sp/>flag<sp/>it<sp/>as<sp/>set</highlight></codeline>
<codeline lineno="1719"><highlight class="comment"><sp/><sp/><sp/>called<sp/>from<sp/>EAM<sp/>pair<sp/>routine</highlight></codeline>
<codeline lineno="1720"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::set_mass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itype,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mass<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>set<sp/>mass<sp/>for<sp/>this<sp/>atom<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itype<sp/>&lt;<sp/>1<sp/>||<sp/>itype<sp/>&gt;<sp/>ntypes)</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>type<sp/>for<sp/>mass<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>mass[itype]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/>mass_setflag[itype]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mass[itype]<sp/>&lt;=<sp/>0.0)<sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>mass<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1735"><highlight class="comment"><sp/><sp/><sp/>set<sp/>one<sp/>or<sp/>more<sp/>masses<sp/>and<sp/>flag<sp/>them<sp/>as<sp/>set</highlight></codeline>
<codeline lineno="1736"><highlight class="comment"><sp/><sp/><sp/>called<sp/>from<sp/>reading<sp/>of<sp/>input<sp/>script</highlight></codeline>
<codeline lineno="1737"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::set_mass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*narg*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**arg)</highlight></codeline>
<codeline lineno="1740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mass<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>set<sp/>mass<sp/>for<sp/>this<sp/>atom<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lo,hi;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/>utils::bounds(file,line,arg[0],1,ntypes,lo,hi,error);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lo<sp/>&lt;<sp/>1<sp/>||<sp/>hi<sp/>&gt;<sp/>ntypes)<sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>type<sp/>for<sp/>mass<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itype<sp/>=<sp/>lo;<sp/>itype<sp/>&lt;=<sp/>hi;<sp/>itype++)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>mass[itype]<sp/>=<sp/>atof(arg[1]);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>mass_setflag[itype]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mass[itype]<sp/>&lt;=<sp/>0.0)<sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Invalid<sp/>mass<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1756"><highlight class="comment"><sp/><sp/><sp/>set<sp/>all<sp/>masses</highlight></codeline>
<codeline lineno="1757"><highlight class="comment"><sp/><sp/><sp/>called<sp/>from<sp/>reading<sp/>of<sp/>restart<sp/>file,<sp/>also<sp/>from<sp/>ServerMD</highlight></codeline>
<codeline lineno="1758"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::set_mass(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*values)</highlight></codeline>
<codeline lineno="1761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itype<sp/>=<sp/>1;<sp/>itype<sp/>&lt;=<sp/>ntypes;<sp/>itype++)<sp/>{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>mass[itype]<sp/>=<sp/>values[itype];</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>mass_setflag[itype]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1769"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>all<sp/>per-atom-type<sp/>masses<sp/>have<sp/>been<sp/>set</highlight></codeline>
<codeline lineno="1770"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::check_mass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="1773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mass<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rmass_flag)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itype<sp/>=<sp/>1;<sp/>itype<sp/>&lt;=<sp/>ntypes;<sp/>itype++)</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mass_setflag[itype]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(file,line,</highlight><highlight class="stringliteral">&quot;Not<sp/>all<sp/>per-type<sp/>masses<sp/>are<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1782"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>radii<sp/>of<sp/>all<sp/>particles<sp/>of<sp/>itype<sp/>are<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="1783"><highlight class="comment"><sp/><sp/><sp/>return<sp/>1<sp/>if<sp/>true,<sp/>else<sp/>return<sp/>0</highlight></codeline>
<codeline lineno="1784"><highlight class="comment"><sp/><sp/><sp/>also<sp/>return<sp/>the<sp/>radius<sp/>value<sp/>for<sp/>that<sp/>type</highlight></codeline>
<codeline lineno="1785"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Atom::radius_consistency(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itype,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;rad)</highlight></codeline>
<codeline lineno="1788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type[i]<sp/>!=<sp/>itype)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>0.0)<sp/>value<sp/>=<sp/>radius[i];</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>radius[i])<sp/>flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flagall;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;flag,&amp;flagall,1,MPI_INT,MPI_SUM,world);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flagall)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;value,&amp;rad,1,MPI_DOUBLE,MPI_MAX,world);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/><sp/><sp/>check<sp/>that<sp/>shape<sp/>of<sp/>all<sp/>particles<sp/>of<sp/>itype<sp/>are<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/><sp/><sp/>return<sp/>1<sp/>if<sp/>true,<sp/>else<sp/>return<sp/>0</highlight></codeline>
<codeline lineno="1808"><highlight class="comment"><sp/><sp/><sp/>also<sp/>return<sp/>the<sp/>3<sp/>shape<sp/>params<sp/>for<sp/>itype</highlight></codeline>
<codeline lineno="1809"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Atom::shape_consistency(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itype,</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;shapex,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;shapey,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;shapez)</highlight></codeline>
<codeline lineno="1813"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zero[3]<sp/>=<sp/>{0.0,<sp/>0.0,<sp/>0.0};</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>one[3]<sp/>=<sp/>{-1.0,<sp/>-1.0,<sp/>-1.0};</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*shape;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avec_ellipsoid<sp/>=<sp/>(AtomVecEllipsoid<sp/>*)<sp/>style_match(</highlight><highlight class="stringliteral">&quot;ellipsoid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bonus<sp/>=<sp/>avec_ellipsoid-&gt;bonus;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type[i]<sp/>!=<sp/>itype)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ellipsoid[i]<sp/>&lt;<sp/>0)<sp/>shape<sp/>=<sp/>zero;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>bonus[ellipsoid[i]].shape;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(one[0]<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>one[0]<sp/>=<sp/>shape[0];</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>one[1]<sp/>=<sp/>shape[1];</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>one[2]<sp/>=<sp/>shape[2];</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(one[0]<sp/>!=<sp/>shape[0]<sp/>||<sp/>one[1]<sp/>!=<sp/>shape[1]<sp/>||<sp/>one[2]<sp/>!=<sp/>shape[2])</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flagall;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;flag,&amp;flagall,1,MPI_INT,MPI_SUM,world);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flagall)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oneall[3];</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>MPI_Allreduce(one,oneall,3,MPI_DOUBLE,MPI_MAX,world);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>shapex<sp/>=<sp/>oneall[0];</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>shapey<sp/>=<sp/>oneall[1];</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/>shapez<sp/>=<sp/>oneall[2];</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1848"><highlight class="comment"><sp/><sp/><sp/>add<sp/>a<sp/>new<sp/>molecule<sp/>template<sp/>=<sp/>set<sp/>of<sp/>molecules</highlight></codeline>
<codeline lineno="1849"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::add_molecule(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>narg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**arg)</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(narg<sp/>&lt;<sp/>1)<sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Illegal<sp/>molecule<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find_molecule(arg[0])<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Reuse<sp/>of<sp/>molecule<sp/>template<sp/>ID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1st<sp/>molecule<sp/>in<sp/>set<sp/>stores<sp/>nset<sp/>=<sp/>#<sp/>of<sp/>mols,<sp/>others<sp/>store<sp/>nset<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ifile<sp/>=<sp/>count<sp/>of<sp/>molecules<sp/>in<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>=<sp/>argument<sp/>index<sp/>where<sp/>next<sp/>molecule<sp/>starts,<sp/>updated<sp/>by<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ifile<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>molecules<sp/>=<sp/>(Molecule<sp/>**)</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memory-&gt;srealloc(molecules,(nmolecule+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Molecule<sp/>*),</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atom::molecules&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>molecules[nmolecule]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Molecule(lmp,narg,arg,index);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>molecules[nmolecule]-&gt;nset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>molecules[nmolecule-ifile+1]-&gt;nset++;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>nmolecule++;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(molecules[nmolecule-1]-&gt;last)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>ifile++;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1878"><highlight class="comment"><sp/><sp/><sp/>find<sp/>first<sp/>molecule<sp/>in<sp/>set<sp/>with<sp/>template<sp/>ID</highlight></codeline>
<codeline lineno="1879"><highlight class="comment"><sp/><sp/><sp/>return<sp/>-1<sp/>if<sp/>does<sp/>not<sp/>exist</highlight></codeline>
<codeline lineno="1880"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Atom::find_molecule(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imol;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(imol<sp/>=<sp/>0;<sp/>imol<sp/>&lt;<sp/>nmolecule;<sp/>imol++)</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,molecules[imol]-&gt;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imol;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1892"><highlight class="comment"><sp/><sp/><sp/>add<sp/>info<sp/>to<sp/>current<sp/>atom<sp/>ilocal<sp/>from<sp/>molecule<sp/>template<sp/>onemol<sp/>and<sp/>its<sp/>iatom</highlight></codeline>
<codeline lineno="1893"><highlight class="comment"><sp/><sp/><sp/>offset<sp/>=<sp/>atom<sp/>ID<sp/>preceding<sp/>IDs<sp/>of<sp/>atoms<sp/>in<sp/>this<sp/>molecule</highlight></codeline>
<codeline lineno="1894"><highlight class="comment"><sp/><sp/><sp/>called<sp/>by<sp/>fixes<sp/>and<sp/>commands<sp/>that<sp/>add<sp/>molecules</highlight></codeline>
<codeline lineno="1895"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::add_molecule_atom(Molecule<sp/>*onemol,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iatom,</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilocal,<sp/>tagint<sp/>offset)</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(onemol-&gt;qflag<sp/>&amp;&amp;<sp/>q_flag)<sp/>q[ilocal]<sp/>=<sp/>onemol-&gt;q[iatom];</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(onemol-&gt;radiusflag<sp/>&amp;&amp;<sp/>radius_flag)<sp/>radius[ilocal]<sp/>=<sp/>onemol-&gt;radius[iatom];</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(onemol-&gt;rmassflag<sp/>&amp;&amp;<sp/>rmass_flag)<sp/>rmass[ilocal]<sp/>=<sp/>onemol-&gt;rmass[iatom];</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rmass_flag)</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>rmass[ilocal]<sp/>=<sp/>4.0*MY_PI/3.0<sp/>*</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>radius[ilocal]*radius[ilocal]*radius[ilocal];</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(onemol-&gt;bodyflag)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>body[ilocal]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>if<sp/>a<sp/>body<sp/>read<sp/>from<sp/>data<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>onemol-&gt;avec_body-&gt;data_body(ilocal,onemol-&gt;nibody,onemol-&gt;ndbody,</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>onemol-&gt;ibodyparams,onemol-&gt;dbodyparams);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>onemol-&gt;avec_body-&gt;set_quat(ilocal,onemol-&gt;quat_external);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(molecular<sp/>!=<sp/>Atom::MOLECULAR)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>bond<sp/>topology<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>molecular<sp/>atom<sp/>styles,<sp/>but<sp/>not<sp/>atom<sp/>style<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avec-&gt;bonds_allow)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>num_bond[ilocal]<sp/>=<sp/>onemol-&gt;num_bond[iatom];</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_bond[ilocal];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bond_type[ilocal][i]<sp/>=<sp/>onemol-&gt;bond_type[iatom][i];</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bond_atom[ilocal][i]<sp/>=<sp/>onemol-&gt;bond_atom[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avec-&gt;angles_allow)<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>num_angle[ilocal]<sp/>=<sp/>onemol-&gt;num_angle[iatom];</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_angle[ilocal];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle_type[ilocal][i]<sp/>=<sp/>onemol-&gt;angle_type[iatom][i];</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom1[ilocal][i]<sp/>=<sp/>onemol-&gt;angle_atom1[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom2[ilocal][i]<sp/>=<sp/>onemol-&gt;angle_atom2[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle_atom3[ilocal][i]<sp/>=<sp/>onemol-&gt;angle_atom3[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avec-&gt;dihedrals_allow)<sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>num_dihedral[ilocal]<sp/>=<sp/>onemol-&gt;num_dihedral[iatom];</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_dihedral[ilocal];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_type[ilocal][i]<sp/>=<sp/>onemol-&gt;dihedral_type[iatom][i];</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom1[ilocal][i]<sp/>=<sp/>onemol-&gt;dihedral_atom1[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom2[ilocal][i]<sp/>=<sp/>onemol-&gt;dihedral_atom2[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom3[ilocal][i]<sp/>=<sp/>onemol-&gt;dihedral_atom3[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dihedral_atom4[ilocal][i]<sp/>=<sp/>onemol-&gt;dihedral_atom4[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avec-&gt;impropers_allow)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>num_improper[ilocal]<sp/>=<sp/>onemol-&gt;num_improper[iatom];</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_improper[ilocal];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>improper_type[ilocal][i]<sp/>=<sp/>onemol-&gt;improper_type[iatom][i];</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom1[ilocal][i]<sp/>=<sp/>onemol-&gt;improper_atom1[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom2[ilocal][i]<sp/>=<sp/>onemol-&gt;improper_atom2[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom3[ilocal][i]<sp/>=<sp/>onemol-&gt;improper_atom3[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>improper_atom4[ilocal][i]<sp/>=<sp/>onemol-&gt;improper_atom4[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(onemol-&gt;specialflag)<sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>nspecial[ilocal][0]<sp/>=<sp/>onemol-&gt;nspecial[iatom][0];</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>nspecial[ilocal][1]<sp/>=<sp/>onemol-&gt;nspecial[iatom][1];</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>nspecial[ilocal][2]<sp/>=<sp/>onemol-&gt;nspecial[iatom][2];</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>special[ilocal][i]<sp/>=<sp/>onemol-&gt;special[iatom][i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1968"><highlight class="comment"><sp/><sp/><sp/>reorder<sp/>owned<sp/>atoms<sp/>so<sp/>those<sp/>in<sp/>firstgroup<sp/>appear<sp/>first</highlight></codeline>
<codeline lineno="1969"><highlight class="comment"><sp/><sp/><sp/>called<sp/>by<sp/>comm-&gt;exchange()<sp/>if<sp/>atom_modify<sp/>first<sp/>group<sp/>is<sp/>set</highlight></codeline>
<codeline lineno="1970"><highlight class="comment"><sp/><sp/><sp/>only<sp/>owned<sp/>atoms<sp/>exist<sp/>at<sp/>this<sp/>point,<sp/>no<sp/>ghost<sp/>atoms</highlight></codeline>
<codeline lineno="1971"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::first_reorder()</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insure<sp/>there<sp/>is<sp/>one<sp/>extra<sp/>atom<sp/>location<sp/>at<sp/>end<sp/>of<sp/>arrays<sp/>for<sp/>swaps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlocal<sp/>==<sp/>nmax)<sp/>avec-&gt;grow(0);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>owned<sp/>atoms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nfirst<sp/>=<sp/>index<sp/>of<sp/>first<sp/>atom<sp/>not<sp/>in<sp/>firstgroup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>find<sp/>firstgroup<sp/>atom<sp/>out<sp/>of<sp/>place,<sp/>swap<sp/>it<sp/>with<sp/>atom<sp/>nfirst</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitmask<sp/>=<sp/>group-&gt;bitmask[firstgroup];</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>nfirst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nfirst<sp/>&lt;<sp/>nlocal<sp/>&amp;&amp;<sp/>mask[nfirst]<sp/>&amp;<sp/>bitmask)<sp/>nfirst++;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask[i]<sp/>&amp;<sp/>bitmask<sp/>&amp;&amp;<sp/>i<sp/>&gt;<sp/>nfirst)<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>avec-&gt;copy(i,nlocal,0);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>avec-&gt;copy(nfirst,i,0);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>avec-&gt;copy(nlocal,nfirst,0);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nfirst<sp/>&lt;<sp/>nlocal<sp/>&amp;&amp;<sp/>mask[nfirst]<sp/>&amp;<sp/>bitmask)<sp/>nfirst++;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1998"><highlight class="comment"><sp/><sp/><sp/>perform<sp/>spatial<sp/>sort<sp/>of<sp/>atoms<sp/>within<sp/>my<sp/>sub-domain</highlight></codeline>
<codeline lineno="1999"><highlight class="comment"><sp/><sp/><sp/>always<sp/>called<sp/>between<sp/>comm-&gt;exchange()<sp/>and<sp/>comm-&gt;borders()</highlight></codeline>
<codeline lineno="2000"><highlight class="comment"><sp/><sp/><sp/>don&apos;t<sp/>have<sp/>to<sp/>worry<sp/>about<sp/>clearing/setting<sp/>atom-&gt;map<sp/>since<sp/>done<sp/>in<sp/>comm</highlight></codeline>
<codeline lineno="2001"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::sort()</highlight></codeline>
<codeline lineno="2004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,m,n,ix,iy,iz,ibin,empty;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>next<sp/>timestep<sp/>for<sp/>sorting<sp/>to<sp/>take<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>nextsort<sp/>=<sp/>(update-&gt;ntimestep/sortfreq)*sortfreq<sp/>+<sp/>sortfreq;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>re-setup<sp/>sort<sp/>bins<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;box_change)<sp/>setup_sort_bins();</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbins<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reallocate<sp/>per-atom<sp/>vectors<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlocal<sp/>&gt;<sp/>maxnext)<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;destroy(next);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;destroy(permute);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>maxnext<sp/>=<sp/>atom-&gt;nmax;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;create(next,maxnext,</highlight><highlight class="stringliteral">&quot;atom:next&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;create(permute,maxnext,</highlight><highlight class="stringliteral">&quot;atom:permute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insure<sp/>there<sp/>is<sp/>one<sp/>extra<sp/>atom<sp/>location<sp/>at<sp/>end<sp/>of<sp/>arrays<sp/>for<sp/>swaps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlocal<sp/>==<sp/>nmax)<sp/>avec-&gt;grow(0);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bin<sp/>atoms<sp/>in<sp/>reverse<sp/>order<sp/>so<sp/>linked<sp/>list<sp/>will<sp/>be<sp/>in<sp/>forward<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbins;<sp/>i++)<sp/>binhead[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>nlocal-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>ix<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>((x[i][0]-bboxlo[0])*bininvx);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>iy<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>((x[i][1]-bboxlo[1])*bininvy);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>iz<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>((x[i][2]-bboxlo[2])*bininvz);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>MAX(ix,0);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>MAX(iy,0);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>iz<sp/>=<sp/>MAX(iz,0);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>MIN(ix,nbinx-1);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>MIN(iy,nbiny-1);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>iz<sp/>=<sp/>MIN(iz,nbinz-1);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>ibin<sp/>=<sp/>iz*nbiny*nbinx<sp/>+<sp/>iy*nbinx<sp/>+<sp/>ix;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>next[i]<sp/>=<sp/>binhead[ibin];</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>binhead[ibin]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>permute<sp/>=<sp/>desired<sp/>permutation<sp/>of<sp/>atoms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>permute[I]<sp/>=<sp/>J<sp/>means<sp/>Ith<sp/>new<sp/>atom<sp/>will<sp/>be<sp/>Jth<sp/>old<sp/>atom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>nbins;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>binhead[m];</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permute[n++]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>next[i];</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>=<sp/>current<sp/>permutation,<sp/>just<sp/>reuse<sp/>next<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current[I]<sp/>=<sp/>J<sp/>means<sp/>Ith<sp/>current<sp/>atom<sp/>is<sp/>Jth<sp/>old<sp/>atom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*current<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/>current[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reorder<sp/>local<sp/>atom<sp/>list,<sp/>when<sp/>done,<sp/>current<sp/>=<sp/>permute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>perform<sp/>&quot;in<sp/>place&quot;<sp/>using<sp/>copy()<sp/>to<sp/>extra<sp/>atom<sp/>location<sp/>at<sp/>end<sp/>of<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inner<sp/>while<sp/>loop<sp/>processes<sp/>one<sp/>cycle<sp/>of<sp/>the<sp/>permutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>before<sp/>inner-loop<sp/>moves<sp/>an<sp/>atom<sp/>to<sp/>end<sp/>of<sp/>atom<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>after<sp/>inner-loop<sp/>moves<sp/>atom<sp/>at<sp/>end<sp/>of<sp/>list<sp/>back<sp/>into<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>=<sp/>location<sp/>in<sp/>atom<sp/>list<sp/>that<sp/>is<sp/>currently<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current[i]<sp/>==<sp/>permute[i])<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>avec-&gt;copy(i,nlocal,0);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>empty<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(permute[empty]<sp/>!=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>avec-&gt;copy(permute[empty],empty,0);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>empty<sp/>=<sp/>current[empty]<sp/>=<sp/>permute[empty];</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/>avec-&gt;copy(nlocal,empty,0);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>current[empty]<sp/>=<sp/>permute[empty];</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sanity<sp/>check<sp/>that<sp/>current<sp/>=<sp/>permute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>flag<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlocal;<sp/>i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(current[i]<sp/>!=<sp/>permute[i])<sp/>flag<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>flagall;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//MPI_Allreduce(&amp;flag,&amp;flagall,1,MPI_INT,MPI_SUM,world);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(flagall)<sp/>error-&gt;all(FLERR,&quot;Atom<sp/>sort<sp/>did<sp/>not<sp/>operate<sp/>correctly&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2097"><highlight class="comment"><sp/><sp/><sp/>setup<sp/>bins<sp/>for<sp/>spatial<sp/>sorting<sp/>of<sp/>atoms</highlight></codeline>
<codeline lineno="2098"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::setup_sort_bins()</highlight></codeline>
<codeline lineno="2101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>binsize:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>setting<sp/>if<sp/>explicitly<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>=<sp/>1/2<sp/>of<sp/>neighbor<sp/>cutoff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>neighbor<sp/>cutoff<sp/>=<sp/>0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>in<sp/>that<sp/>case,<sp/>disable<sp/>sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binsize<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(userbinsize<sp/>&gt;<sp/>0.0)<sp/>binsize<sp/>=<sp/>userbinsize;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbor-&gt;cutneighmax<sp/>&gt;<sp/>0.0)<sp/>binsize<sp/>=<sp/>0.5<sp/>*<sp/>neighbor-&gt;cutneighmax;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((binsize<sp/>==<sp/>0.0)<sp/>&amp;&amp;<sp/>(sortfreq<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>sortfreq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm-&gt;me<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;warning(FLERR,</highlight><highlight class="stringliteral">&quot;No<sp/>pairwise<sp/>cutoff<sp/>or<sp/>binsize<sp/>set.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Atom<sp/>sorting<sp/>therefore<sp/>disabled.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bininv<sp/>=<sp/>1.0/binsize;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nbin<sp/>xyz<sp/>=<sp/>local<sp/>bins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bbox<sp/>lo/hi<sp/>=<sp/>bounding<sp/>box<sp/>of<sp/>my<sp/>sub-domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;triclinic)</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>domain-&gt;bbox(domain-&gt;sublo_lamda,domain-&gt;subhi_lamda,bboxlo,bboxhi);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxlo[0]<sp/>=<sp/>domain-&gt;sublo[0];</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxlo[1]<sp/>=<sp/>domain-&gt;sublo[1];</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxlo[2]<sp/>=<sp/>domain-&gt;sublo[2];</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxhi[0]<sp/>=<sp/>domain-&gt;subhi[0];</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxhi[1]<sp/>=<sp/>domain-&gt;subhi[1];</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxhi[2]<sp/>=<sp/>domain-&gt;subhi[2];</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>nbinx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>((bboxhi[0]-bboxlo[0])<sp/>*<sp/>bininv);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>nbiny<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>((bboxhi[1]-bboxlo[1])<sp/>*<sp/>bininv);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>nbinz<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>((bboxhi[2]-bboxlo[2])<sp/>*<sp/>bininv);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;dimension<sp/>==<sp/>2)<sp/>nbinz<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbinx<sp/>==<sp/>0)<sp/>nbinx<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbiny<sp/>==<sp/>0)<sp/>nbiny<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbinz<sp/>==<sp/>0)<sp/>nbinz<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>bininvx<sp/>=<sp/>nbinx<sp/>/<sp/>(bboxhi[0]-bboxlo[0]);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/>bininvy<sp/>=<sp/>nbiny<sp/>/<sp/>(bboxhi[1]-bboxlo[1]);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/>bininvz<sp/>=<sp/>nbinz<sp/>/<sp/>(bboxhi[2]-bboxlo[2]);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>LMP_USER_INTEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intel_neigh<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbor-&gt;nrequest)<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbor-&gt;requests[0]-&gt;intel)<sp/>intel_neigh<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbor-&gt;old_nrequest)</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbor-&gt;old_requests[0]-&gt;intel)<sp/>intel_neigh<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intel_neigh<sp/>&amp;&amp;<sp/>userbinsize<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbor-&gt;binsizeflag)<sp/>bininv<sp/>=<sp/>1.0/neighbor-&gt;binsize_user;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nx_low<sp/>=<sp/>neighbor-&gt;bboxlo[0];</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ny_low<sp/>=<sp/>neighbor-&gt;bboxlo[1];</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nz_low<sp/>=<sp/>neighbor-&gt;bboxlo[2];</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nxbbox<sp/>=<sp/>neighbor-&gt;bboxhi[0]<sp/>-<sp/>nx_low;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nybbox<sp/>=<sp/>neighbor-&gt;bboxhi[1]<sp/>-<sp/>ny_low;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nzbbox<sp/>=<sp/>neighbor-&gt;bboxhi[2]<sp/>-<sp/>nz_low;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nnbinx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(nxbbox<sp/>*<sp/>bininv);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nnbiny<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(nybbox<sp/>*<sp/>bininv);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nnbinz<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(nzbbox<sp/>*<sp/>bininv);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain-&gt;dimension<sp/>==<sp/>2)<sp/>nnbinz<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nnbinx<sp/>==<sp/>0)<sp/>nnbinx<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nnbiny<sp/>==<sp/>0)<sp/>nnbiny<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nnbinz<sp/>==<sp/>0)<sp/>nnbinz<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binsizex<sp/>=<sp/>nxbbox/nnbinx;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binsizey<sp/>=<sp/>nybbox/nnbiny;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binsizez<sp/>=<sp/>nzbbox/nnbinz;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>bininvx<sp/>=<sp/>1.0<sp/>/<sp/>binsizex;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>bininvy<sp/>=<sp/>1.0<sp/>/<sp/>binsizey;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>bininvz<sp/>=<sp/>1.0<sp/>/<sp/>binsizez;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lxo<sp/>=<sp/>(bboxlo[0]<sp/>-<sp/>nx_low)<sp/>*<sp/>bininvx;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lyo<sp/>=<sp/>(bboxlo[1]<sp/>-<sp/>ny_low)<sp/>*<sp/>bininvy;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lzo<sp/>=<sp/>(bboxlo[2]<sp/>-<sp/>nz_low)<sp/>*<sp/>bininvz;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxlo[0]<sp/>=<sp/>nx_low<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lxo)<sp/>/<sp/>bininvx;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxlo[1]<sp/>=<sp/>ny_low<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lyo)<sp/>/<sp/>bininvy;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxlo[2]<sp/>=<sp/>nz_low<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lzo)<sp/>/<sp/>bininvz;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>nbinx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((bboxhi[0]<sp/>-<sp/>bboxlo[0])<sp/>*<sp/>bininvx)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>nbiny<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((bboxhi[1]<sp/>-<sp/>bboxlo[1])<sp/>*<sp/>bininvy)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>nbinz<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((bboxhi[2]<sp/>-<sp/>bboxlo[2])<sp/>*<sp/>bininvz)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxhi[0]<sp/>=<sp/>bboxlo[0]<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nbinx)<sp/>/<sp/>bininvx;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxhi[1]<sp/>=<sp/>bboxlo[1]<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nbiny)<sp/>/<sp/>bininvy;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxhi[2]<sp/>=<sp/>bboxlo[2]<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nbinz)<sp/>/<sp/>bininvz;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1.0*nbinx*nbiny*nbinz<sp/>&gt;<sp/>INT_MAX)</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;one(FLERR,</highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>atom<sp/>sorting<sp/>bins&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/>nbins<sp/>=<sp/>nbinx*nbiny*nbinz;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reallocate<sp/>per-bin<sp/>memory<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbins<sp/>&gt;<sp/>maxbin)<sp/>{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;destroy(binhead);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/>maxbin<sp/>=<sp/>nbins;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;create(binhead,maxbin,</highlight><highlight class="stringliteral">&quot;atom:binhead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2211"><highlight class="comment"><sp/><sp/><sp/>register<sp/>a<sp/>callback<sp/>to<sp/>a<sp/>fix<sp/>so<sp/>it<sp/>can<sp/>manage<sp/>atom-based<sp/>arrays</highlight></codeline>
<codeline lineno="2212"><highlight class="comment"><sp/><sp/><sp/>happens<sp/>when<sp/>fix<sp/>is<sp/>created</highlight></codeline>
<codeline lineno="2213"><highlight class="comment"><sp/><sp/><sp/>flag<sp/>=<sp/>0<sp/>for<sp/>grow,<sp/>1<sp/>for<sp/>restart,<sp/>2<sp/>for<sp/>border<sp/>comm</highlight></codeline>
<codeline lineno="2214"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::add_callback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="2217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ifix;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>fix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>find<sp/>null<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>it&apos;s<sp/>this<sp/>one,<sp/>since<sp/>it<sp/>is<sp/>being<sp/>replaced<sp/>and<sp/>has<sp/>just<sp/>been<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>at<sp/>this<sp/>point<sp/>in<sp/>re-creation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>don&apos;t<sp/>find<sp/>null<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>i<sp/>is<sp/>set<sp/>to<sp/>nfix<sp/>=<sp/>new<sp/>one<sp/>currently<sp/>being<sp/>added<sp/>at<sp/>end<sp/>of<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ifix<sp/>=<sp/>0;<sp/>ifix<sp/>&lt;<sp/>modify-&gt;nfix;<sp/>ifix++)</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(modify-&gt;fix[ifix]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>callback<sp/>to<sp/>lists<sp/>and<sp/>sort,<sp/>reallocating<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sorting<sp/>is<sp/>required<sp/>in<sp/>cases<sp/>where<sp/>fixes<sp/>were<sp/>replaced<sp/>as<sp/>it<sp/>ensures<sp/>atom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>is<sp/>read/written/transfered<sp/>in<sp/>the<sp/>same<sp/>order<sp/>that<sp/>fixes<sp/>are<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>GROW)<sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextra_grow<sp/>==<sp/>nextra_grow_max)<sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextra_grow_max<sp/>+=<sp/>DELTA;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memory-&gt;grow(extra_grow,nextra_grow_max,</highlight><highlight class="stringliteral">&quot;atom:extra_grow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>extra_grow[nextra_grow]<sp/>=<sp/>ifix;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>nextra_grow++;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(extra_grow,<sp/>extra_grow<sp/>+<sp/>nextra_grow);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>RESTART)<sp/>{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextra_restart<sp/>==<sp/>nextra_restart_max)<sp/>{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextra_restart_max<sp/>+=<sp/>DELTA;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memory-&gt;grow(extra_restart,nextra_restart_max,</highlight><highlight class="stringliteral">&quot;atom:extra_restart&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>extra_restart[nextra_restart]<sp/>=<sp/>ifix;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>nextra_restart++;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(extra_restart,<sp/>extra_restart<sp/>+<sp/>nextra_restart);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>BORDER)<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextra_border<sp/>==<sp/>nextra_border_max)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextra_border_max<sp/>+=<sp/>DELTA;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memory-&gt;grow(extra_border,nextra_border_max,</highlight><highlight class="stringliteral">&quot;atom:extra_border&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>extra_border[nextra_border]<sp/>=<sp/>ifix;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>nextra_border++;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(extra_border,<sp/>extra_border<sp/>+<sp/>nextra_border);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2262"><highlight class="comment"><sp/><sp/><sp/>unregister<sp/>a<sp/>callback<sp/>to<sp/>a<sp/>fix</highlight></codeline>
<codeline lineno="2263"><highlight class="comment"><sp/><sp/><sp/>happens<sp/>when<sp/>fix<sp/>is<sp/>deleted,<sp/>called<sp/>by<sp/>its<sp/>destructor</highlight></codeline>
<codeline lineno="2264"><highlight class="comment"><sp/><sp/><sp/>flag<sp/>=<sp/>0<sp/>for<sp/>grow,<sp/>1<sp/>for<sp/>restart</highlight></codeline>
<codeline lineno="2265"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::delete_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="2268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ifix<sp/>=<sp/>modify-&gt;find_fix(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compact<sp/>the<sp/>list<sp/>of<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>GROW)<sp/>{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(match<sp/>=<sp/>0;<sp/>match<sp/>&lt;<sp/>nextra_grow;<sp/>match++)</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_grow[match]<sp/>==<sp/>ifix)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nextra_grow<sp/>==<sp/>0)<sp/>||<sp/>(match<sp/>==<sp/>nextra_grow))</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>delete<sp/>non-existent<sp/>Atom::grow()<sp/>callback&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>match;<sp/>i<sp/>&lt;<sp/>nextra_grow-1;<sp/>i++)</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_grow[i]<sp/>=<sp/>extra_grow[i+1];</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>nextra_grow--;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>RESTART)<sp/>{</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(match<sp/>=<sp/>0;<sp/>match<sp/>&lt;<sp/>nextra_restart;<sp/>match++)</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_restart[match]<sp/>==<sp/>ifix)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nextra_restart<sp/>==<sp/>0)<sp/>||<sp/>(match<sp/>==<sp/>nextra_restart))</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>delete<sp/>non-existent<sp/>Atom::restart()<sp/>callback&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>match;<sp/>i<sp/>&lt;<sp/>nextra_restart-1;<sp/>i++)</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_restart[i]<sp/>=<sp/>extra_restart[i+1];</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/>nextra_restart--;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>BORDER)<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(match<sp/>=<sp/>0;<sp/>match<sp/>&lt;<sp/>nextra_border;<sp/>match++)</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_border[match]<sp/>==<sp/>ifix)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nextra_border<sp/>==<sp/>0)<sp/>||<sp/>(match<sp/>==<sp/>nextra_border))</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;all(FLERR,</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>delete<sp/>non-existent<sp/>Atom::border()<sp/>callback&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>match;<sp/>i<sp/>&lt;<sp/>nextra_border-1;<sp/>i++)</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_border[i]<sp/>=<sp/>extra_border[i+1];</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>nextra_border--;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2308"><highlight class="comment"><sp/><sp/><sp/>decrement<sp/>ptrs<sp/>in<sp/>callback<sp/>lists<sp/>to<sp/>fixes<sp/>beyond<sp/>the<sp/>deleted<sp/>ifix</highlight></codeline>
<codeline lineno="2309"><highlight class="comment"><sp/><sp/><sp/>happens<sp/>after<sp/>fix<sp/>is<sp/>deleted</highlight></codeline>
<codeline lineno="2310"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Atom::update_callback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ifix)</highlight></codeline>
<codeline lineno="2313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nextra_grow;<sp/>i++)</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_grow[i]<sp/>&gt;<sp/>ifix)<sp/>extra_grow[i]--;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nextra_restart;<sp/>i++)</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_restart[i]<sp/>&gt;<sp/>ifix)<sp/>extra_restart[i]--;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nextra_border;<sp/>i++)</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_border[i]<sp/>&gt;<sp/>ifix)<sp/>extra_border[i]--;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2323"><highlight class="comment"><sp/><sp/><sp/>find<sp/>custom<sp/>per-atom<sp/>vector<sp/>with<sp/>name</highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/><sp/><sp/>return<sp/>index<sp/>if<sp/>found,<sp/>and<sp/>flag<sp/>=<sp/>0/1<sp/>for<sp/>int/double</highlight></codeline>
<codeline lineno="2325"><highlight class="comment"><sp/><sp/><sp/>return<sp/>-1<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline lineno="2326"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Atom::find_custom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;flag)</highlight></codeline>
<codeline lineno="2329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nivector;<sp/>i++)</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iname[i]<sp/>&amp;&amp;<sp/>strcmp(iname[i],name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndvector;<sp/>i++)</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dname[i]<sp/>&amp;&amp;<sp/>strcmp(dname[i],name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classLAMMPS__NS_1_1Atom_1af4066c0d215a97ec617f1037ca2301a7" kindref="member">Atom::add_custom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="2359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>nivector;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>nivector++;</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/>iname<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>memory-&gt;srealloc(iname,nivector*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atom:iname&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(name)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>iname[index]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(iname[index],name);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/>ivector<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**)<sp/>memory-&gt;srealloc(ivector,nivector*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atom:ivector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;create(ivector[index],nmax,</highlight><highlight class="stringliteral">&quot;atom:ivector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>ndvector;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>ndvector++;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/>dname<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>memory-&gt;srealloc(dname,ndvector*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atom:dname&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(name)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>dname[index]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(dname[index],name);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>dvector<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**)<sp/>memory-&gt;srealloc(dvector,ndvector*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atom:dvector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;create(dvector[index],nmax,</highlight><highlight class="stringliteral">&quot;atom:dvector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLAMMPS__NS_1_1Atom_1af9668ba3cf2115b9724c9ecc41bc3c84" kindref="member">Atom::remove_custom</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="2403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;destroy(ivector[index]);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/>ivector[index]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>iname[index];</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/>iname[index]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>memory-&gt;destroy(dvector[index]);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>dvector[index]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>dname[index];</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/>dname[index]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classLAMMPS__NS_1_1Atom_1aa12f2b783db9b4523ddbf9f01d132d88" kindref="member">Atom::extract</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="2534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4th<sp/>customization<sp/>section:<sp/>customize<sp/>by<sp/>adding<sp/>new<sp/>variable<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>please<sp/>see<sp/>the<sp/>following<sp/>function<sp/>to<sp/>set<sp/>the<sp/>type<sp/>of<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>programs<sp/>can<sp/>detect<sp/>it<sp/>dynamically<sp/>at<sp/>run<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>this<sp/>array<sp/>is<sp/>only<sp/>of<sp/>length<sp/>ntypes+1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>mass;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>tag;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>type;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;mask&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>mask;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;image&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>image;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>x;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>v;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>f;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;molecule&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>molecule;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>mu;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;omega&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>omega;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;angmom&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>angmom;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;torque&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>torque;</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;radius&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>radius;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;rmass&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>rmass;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;ellipsoid&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>ellipsoid;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>line;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;tri&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>tri;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>body;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;vfrac&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>vfrac;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;s0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>s0;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;x0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>x0;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;spin&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>spin;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;eradius&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>eradius;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;ervel&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>ervel;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;erforce&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>erforce;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;ervelforce&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>ervelforce;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;cs&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>cs;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;csforce&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>csforce;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;vforce&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>vforce;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;etag&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>etag;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;rho&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>rho;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;drho&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>drho;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;esph&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>esph;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;desph&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>desph;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;cv&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>cv;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;vest&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>vest;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-MESONT<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>length;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;buckling&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>buckling;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;bond_nt&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>bond_nt;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;contact_radius&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>contact_radius;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;smd_data_9&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>smd_data_9;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;smd_stress&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>smd_stress;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;eff_plastic_strain&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>eff_plastic_strain;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;eff_plastic_strain_rate&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>eff_plastic_strain_rate;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;damage&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>damage;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;dpdTheta&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>dpdTheta;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;edpd_temp&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>edpd_temp;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>customization<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classLAMMPS__NS_1_1Atom_1ae25da0ff714bd58c9ebf8f50e4edb81b" kindref="member">Atom::extract_datatype</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="2622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>5th<sp/>customization<sp/>section:<sp/>customize<sp/>by<sp/>adding<sp/>new<sp/>variable<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_TAGINT;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_INT;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;mask&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_INT;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;image&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_TAGINT;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;molecule&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_TAGINT;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;omega&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;angmom&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;torque&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;radius&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;rmass&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;ellipsoid&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_INT;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_INT;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;tri&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_INT;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_INT;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;vfrac&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;s0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;x0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;spin&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_INT;</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;eradius&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;ervel&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;erforce&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;ervelforce&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;cs&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;csforce&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;vforce&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;etag&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_INT;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;rho&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;drho&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;esph&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;desph&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;cv&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;vest&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>USER-MESONT<sp/>package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;buckling&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_INT;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;bond_nt&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>LAMMPS_TAGINT_2D;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;contact_radius&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;smd_data_9&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;smd_stress&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE_2D;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;eff_plastic_strain&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;eff_plastic_strain_rate&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;damage&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;dpdTheta&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,</highlight><highlight class="stringliteral">&quot;edpd_temp&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LAMMPS_DOUBLE;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>customization<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2691"><highlight class="comment"><sp/><sp/><sp/>return<sp/>#<sp/>of<sp/>bytes<sp/>of<sp/>allocated<sp/>memory</highlight></codeline>
<codeline lineno="2692"><highlight class="comment"><sp/><sp/><sp/>call<sp/>to<sp/>avec<sp/>tallies<sp/>per-atom<sp/>vectors</highlight></codeline>
<codeline lineno="2693"><highlight class="comment"><sp/><sp/><sp/>add<sp/>in<sp/>global<sp/>to<sp/>local<sp/>mapping<sp/>storage</highlight></codeline>
<codeline lineno="2694"><highlight class="comment">-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Atom::memory_usage()</highlight></codeline>
<codeline lineno="2697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/>avec-&gt;memory_usage();</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/>bytes<sp/>+=<sp/>max_same*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map_style<sp/>==<sp/>MAP_ARRAY)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>memory-&gt;usage(map_array,map_maxarray);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map_style<sp/>==<sp/>MAP_HASH)<sp/>{</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>map_nbucket*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>map_nhash*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(HashElem);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxnext)<sp/>{</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>memory-&gt;usage(next,maxnext);</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>memory-&gt;usage(permute,maxnext);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bytes;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jfh3/shared-VM/lammps-29Oct20-user-pinn/src/atom.cpp"/>
  </compounddef>
</doxygen>
